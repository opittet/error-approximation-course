### A Pluto.jl notebook ###
# v0.19.27

using Markdown
using InteractiveUtils

# This Pluto notebook uses @bind for interactivity. When running this notebook outside of Pluto, the following 'mock version' of @bind gives bound variables a default value (instead of an error).
macro bind(def, element)
    quote
        local iv = try Base.loaded_modules[Base.PkgId(Base.UUID("6e696c72-6542-2067-7265-42206c756150"), "AbstractPlutoDingetjes")].Bonds.initial_value catch; b -> missing; end
        local el = $(esc(element))
        global $(esc(def)) = Core.applicable(Base.get, el) ? Base.get(el) : iv(el)
        el
    end
end

# ╔═╡ 0bed302a-6efa-4c23-863a-a56aa51bc73a
begin
	using BenchmarkTools
	using DFTK
	using DoubleFloats
	using LinearAlgebra
	using LinearMaps
	using IntervalArithmetic
	using GenericLinearAlgebra
	using MatrixDepot
	using Printf
	using Plots
	using PlutoTeachingTools
	using PlutoUI
	using TimerOutputs
end

# ╔═╡ 02d730f5-fcd1-4547-b066-adbc26455106
md"Error control in scientific modelling (MATH 500, Herbst)"

# ╔═╡ d30b3ad3-5a28-451f-8de0-3d43cfb7a453
md"""
# Project 1: Numerical investigation of quantum tunnelling
*To be handed in via moodle by 01.12.2023*
"""

# ╔═╡ a95792dd-6723-4bb3-9bab-308f80a6edc5
TableOfContents()

# ╔═╡ 4aed3b8b-f810-452b-8581-9b2a2b29ca0f
md"""
## Introduction and physical setting

The goal of this project is to develop an efficient numerical approach to investigate the effect of *quantum tunnelling* in a system where bosonic particles interact with an infinite 1D chain of identical atoms. Our goal is to control both algorithm error as well as the arithmetic error in the description of tunnelling.

From the physical perspective we consider a system of $N$ bosonic particles, which interact with a chain of $M$ atoms. First we take $M$ finite and small, then we will make it larger and larger. To simplify our life we consider the bosons to be non-interacting with each other and we take the interaction of a boson located at $x$ and an atom located at $R$ to be Gaussian, i.e.
```math
v^\text{atom} (x - R) = - \frac{α}{\sqrt{2π} σ} \exp\left( - \frac{(x-R)^2}{4σ^2} \right)
```
with $\sigma, α > 0$ given constants and $R \in \mathbb{R}$.
Pictorially for $α=2$ and $σ=\dfrac14$, this potential looks like
"""

# ╔═╡ 89c6da91-48de-4ec5-a9b5-43f8bc2394a6
v_atom(x::T; α=2, σ=1//4) where {T} = - α / (σ * sqrt(2T(π))) * exp(-x^2 ./ 4σ^2 )

# ╔═╡ b86eaee4-887b-4f52-83da-685de979c012
plot(x -> v_atom(x), xlims=(-4, 4), label="Gaussian at R=0")

# ╔═╡ e6b1c322-3a4f-4073-9f59-7545a0e63ac5
md"""
i.e. a confining Gaussian-shaped well. If two atoms are present, e.g. at $R = \pm 1$ one would argue their effect adds up, i.e. one would expect the total potential to be
"""

# ╔═╡ b398b4ca-c0f9-4291-afb4-30a9644bbdb5
plot(x -> v_atom(x + 1) + v_atom(x - 1), xlims=(-4, 4), label="Gaussians at  R=1 and R=-1")

# ╔═╡ 3465e45d-344d-4473-83e6-da157e01a31c
md"""
However, this is exactly where it starts to matters whether we allow for quantum tunnelling or not.

We defer the case without quantum tunnelling for later and first discuss the **full quantum-mechanical treatment**. In this setting the potential from multiple atoms indeed just adds up as plotted above, such that the total potential acting on a boson at position $x$ subject to the full chain (with all atoms $j=1,\ldots,M$) is
```math
v^\text{chain}(x) = \sum_{j=1}^M v^\text{atom} (x - R_j)
```
where the $R_j$ are the positions of the $M$ atoms.

Since the bosons are non-interacting with each other, the total potential generated by all bosons at positions $x_1, \ldots, x_N$ is
```math
V(x_1, \ldots, x_N) = \sum_{i=1}^N v^\text{chain}(x_i) \qquad \text{$(\ast)$}.
```
Similarly each boson contributes a kinetic operator term $-\frac{1}{2} \frac{\partial^2}{\partial x_i^2}$, resulting in the total Hamiltonian of the system as
```math
\mathcal{H} = -\frac12 \sum_{i=1}^N \frac{\partial^2}{\partial x_i^2} + V(x_1, \ldots, x_N),
```
which is an operator in $L^2(\mathbb{R}^N)$. We are interested in its ground state, i.e. the lowest eigenpair $(E_1, \Psi_1) \in \mathbb{R} \times L^2(\mathbb{R}^N, \mathbb{C})$ such that we need to solve
```math
\mathcal{H} \Psi_1 = E_1 \Psi_1.
```
on the open domain $\mathbb{R}^N$.
"""

# ╔═╡ 198f0276-f01b-4e8a-9225-4df74bcc2a46
md"""
### Task 1: Ground state energy if tunneling is allowed
Assume that all eigenstates $\Psi$ of $\mathcal{H}$ factorise as
```math
\Psi(x_1, x_2, \ldots, x_N) = \prod_{i=1}^N \psi_i^\text{chain}(x_i),
```
where the $\psi_i^\text{chain} \in L^2(\mathbb{R}, \mathbb{C})$ are themselves eigenstates of the one-particle Hamiltonian
```math
H^\text{chain} = - \frac12 \Delta + v^\text{chain},
```
i.e. they satisfy
```math
\left(H^\text{chain} \psi^\text{chain}_i\right)(x) = - \frac12 \frac{\partial^2}{\partial x^2} \psi^\text{chain}_i(x) + v^\text{chain}(x) \psi^\text{chain}_i(x) = ε^\text{chain}_i \psi^\text{chain}_i(x).
```
Show that the energy eigenvalue of $\mathcal{H}$ corresponding to $\Psi$ is the sum
```math
E = \sum_{i=1}^N ε_i^\text{chain}.
```
Based on this result show that the ground state $\Psi_1$ is just
```math
\Psi_1(x_1, x_2, \ldots, x_N) = \prod_{i=1}^N \psi^\text{chain}_1(x_i),
```
i.e. the $N$-fold product of the lowest eigenstate of $H^\text{chain}$,
with correspondingly energy $E_1 = N ε^\text{chain}_1$.
*Hint:* Keep in mind our default ordering of the eigenvalues.


*Note:* If you are more familiar with Fermionic systems (like electrons) you might be surprised by this result. However, keep in mind that bosons don't follow the Pauli exclusion principle.

-------
"""

# ╔═╡ 9414343d-25d2-4502-ab1f-e66e7ef98357
md"""
**Solution:**

Taking into account that
```math
\mathcal{H} = -\frac12 \sum_{i=1}^N \frac{\partial^2}{\partial x_i^2} + V(x_1, \ldots, x_N) = \sum_{i=1}^N H_i^\text{chain},
```
we can derive the following:

```math
\begin{align}
\mathcal{H} \Psi (x_1, x_2, \ldots, x_N) &= \sum_{i=1}^N H_i^\text{chain} \prod_{j=1}^N  \psi_j^\text{chain}(x) \\ 
	&=  \sum_{i=1}^N H_i^\text{chain} \psi_i^\text{chain} \prod_{j\neq i}   \psi_j^\text{chain}(x)\\ 
	&= \sum_{i=1}^N ε^\text{chain}_i \psi^\text{chain}_i \prod_{j\neq i}   \psi_j^\text{chain}(x)\\ 
	&= \sum_{i=1}^N ε^\text{chain}_i \prod_{j=1}^N  \psi_j^\text{chain}(x) = \sum_{i=1}^N ε^\text{chain}_i \Psi (x_1, x_2, \ldots, x_N).
\end{align}
```
"""

# ╔═╡ 51f20534-ff70-4eb8-b075-480b7ca34aab
md"""
Using the result above, let's consider the ground state $\Psi_1$. We have:

```math
\mathcal{H} \Psi_1 = E_1 \Psi_1,
```
where $E_1$ corresponds to the smallest eigenvalue and at the same time $E_1 = \sum_{i=1}^N ε^\text{chain}_i$. 

Considering the default ordering of eigenvalues from smallest to largest, the ground state of $H^\text{chain}$ is denoted as $\psi_1^\text{chain}(x)$ with corresponding the lowest eigenvalue denoted as $ε_1^\text{chain}$. 

Therefore, the ground state energy is defined as follows:

$E_1 = \sum_{i=1}^N ε^\text{chain}_1 = N ε^\text{chain}_1.$

This is true if the ground state $\Psi_1$ is the following:

$\Psi_1(x_1, x_2, \ldots, x_N) = \prod_{i=1}^N \psi^\text{chain}_1(x_i).$
"""

# ╔═╡ 36992fa1-49dc-4ab8-98d3-2b1aed333852
md"""
Next we consider the setting **without quantum tunnelling**. In this case the behaviour of the bosonic particles with respect to the crossing of the barriers between the potential wells is classical, that is to say that they can only cross, if their kinetic energy on the high point of the barrier (i.e. at $x=0$ in the second above plot) is non-zero. Since we are seeking the overall ground state of the system, i.e. where the energy is minimal, we argue that particles thus cannot traverse between the wells in the classical picture (otherwise their total energy is too large to be in the ground state).

Thus in this setting a particle is trapped in one specific well, i.e. if boson $i$ is trapped in well $j$, then its potential contribution is $v^\text{atom}(x_i - R_j)$. To simplify notation we will also refer to this potential as $v^\text{atom}(x_i - \rho_i)$, understanding that $\rho_i = R_j$ for the appropriate $j$.
The total potential then becomes
```math
V^\text{cl}(x_1 - \rho_1, \ldots, x_N- \rho_N) = \sum_{i=1}^N v^\text{atom}(x_i - \rho_i),
```
where the subscript $_\text{cl}$ indicates that we are dealing with the classical description of the barrier crossing.
Thus the total Hamiltonian for this system is
```math
\widetilde{\mathcal{H}}^\text{cl} = -\frac12 \sum_{i=1}^N \frac{\partial^2}{\partial x_i^2} + V^\text{cl}(x_1 - \rho_1, \ldots, x_N- \rho_N).
```
Since we solve on the open domain $\mathbb{R}^N$ this Hamiltonian can be simplified by performing a coordinate transformation $x_1 \to x_1 + ρ_1$ without changing its eigenvalues or eigenstates (apart from translation).
Thus the final Hamiltonian is
```math
\mathcal{H}^\text{cl} = -\frac12 \sum_{i=1}^N \frac{\partial^2}{\partial x_i^2} + V^\text{cl}(x_1, \ldots, x_N),
```
which has a ground state energy
and state $(E_1^\text{cl}, \Psi_1^\text{cl})$ with
```math
\mathcal{H}^\text{cl} \Psi^\text{cl}_1 = E^\text{cl}_1 \Psi^\text{cl}_1.
```
Similarly to *Task 1* we can show that all eigenstates $\Psi^\text{cl}_1$ factorise
and thus that the ground state is necessarily
```math
\Psi_1^\text{cl}(x_1, \ldots, x_N) = \prod_{i=1}^N \psi_1^{\text{atom}}(x_i),
```
where the one-particle states $\psi^{\text{atom}}$
are themselves the lowest-energy states of the single-particle eigenproblems
```math
H^\text{atom} \psi^{\text{atom}}_1 = ε_1^{\text{atom}} ψ_1^{\text{atom}}
\quad \text{where} \quad H^\text{atom} = - \frac12 \Delta + v^\text{atom}(x).
```
The total energy is again the sum of these one-particle energies
```math
E^\text{cl}_1 = \sum_{i=1}^N ε_1^{\text{atom}} = N ε_1^{\text{atom}}.
```
"""

# ╔═╡ fd442026-e333-46af-a454-2e2b630a74f0
md"""
Finally, the difference $\Delta ε = (E_1^\text{cl} - E_1) / N = ε^{\text{atom}}_1 - ε^\text{chain}_1$,
which we will refer to as **tunnelling energy per particle**
is exactly what characterises the effect of quantum tunnelling in this system,
which is the quantity of interest we want to obtain. 
"""

# ╔═╡ 2ccd435c-fbe7-4367-962d-da1ccb50a81e
md"""
### Overview of the computational procedure
To compute $\Delta E$ we thus need to compute the lowest-energy eigenpair of
```math
\left( -\frac12 \Delta + v^\text{atom}(x) \right) \psi^\text{atom}_1(x)
= ε^\text{atom}_1 \psi^\text{atom}_1(x) \qquad \text{(CL)}.
```
and 
```math
\left( -\frac12 \Delta + v^\text{chain}(x)\right) \psi_1^\text{chain}(x)
= ε_1^\text{chain} \psi_1^\text{chain}(x) \qquad \text{(QM)},
```
both on the open domain $x \in \mathbb{R}$, where
```math
v^\text{chain}(x) = \sum_{j=1}^M v^\text{atom} (x - R_j).
```
The tunnelling energy per particle is then simply obtained as the difference between ground state energies $\Delta ε = ε^{\text{atom}}_1 - ε^\text{chain}_1$ 
"""

# ╔═╡ 47cd503d-aa26-4b69-b134-9814cbd2c846
md"""
## Discretisation and numerical solution

Both (CL) and (QM) are Schrödinger-type eigenproblems
```math
\left(- \frac12 \Delta + v(x)\right) \psi = ε \psi \qquad \text{$(\ast)$},
```
which is defined on the open computational domain $x \in \mathbb{R}$. In line with our previous discussion (e.g. in exercise sheet 2), we will reduce this computational domain to the interval $x \in (-a, a)$ together with Dirichlet boundary conditions $\psi(-a)=\psi(a)=0$. The interior is modeled on $N_b$ points using $(N_b+2)$-point finite differences. This discretises the operator into a tridiagonal $\mathbb{R}^{N_b \times N_b}$ matrix.

### Task 2: Developing a tailored iterative eigensolver

To develop an initial numerical solver, we consider the full quantum-mechanical setting with a chain of equal 3 atoms located at $R_1 = 0$ and $R_2 = -R_3 = 2$
with $α = 2$ and $σ = \frac14$ (the default arguments of `v_atom`).
In $(\ast)$ this amounts to the potential
"""

# ╔═╡ b7d9dacb-1f72-4c25-8bd5-998b87a4d24c
v_chain(x) = v_atom(x + 2) + v_atom(x) + v_atom(x - 2)

# ╔═╡ c2fdb263-d796-4554-8e03-f529e8a2e549
plot(v_chain, label="v_chain")

# ╔═╡ 0cd28278-6146-4115-a690-f379e5f7ac30
md"""
**(a)** Code up a function `fd_hamiltonian(V, Nb, a; T=Float64)`, which returns the finite-difference discretised Hamiltonian corresponding to a potential $V$ using $(N_b+2)$-point finite differences (i.e. where the domain $(-a, a)$ is split into $N_b$ equispaced interior points for the FD scheme). Make sure your function is type-stable with respect to the floating-point type `T`: if `T=Float32`, for example, all computation should be done in `Float32`. 
"""

# ╔═╡ 70b9c6da-60c6-40cd-822f-a122cb37b311
md"""
**Solution:**
"""

# ╔═╡ bdcae8ef-12f7-4539-ac16-24243cd6ef1b
function fd_hamiltonian(V, Nb, a; T=Float64)
	grid_points = range(-a, stop=a, length=(Nb+2))[2:end-1]
	h = 2a / T(Nb+1)

	diag = - 2ones(T, Nb) ./ h^2
	side_diag = ones(T, Nb-1) ./ h^2
	fd_laplacian = SymTridiagonal(diag, side_diag)

	Vm = Diagonal(vec(T.([V(point) for point in grid_points])))
	fd_Hm = - T(0.5) * fd_laplacian + Vm
end

# ╔═╡ a86db249-f84f-41d3-9dde-80d3f32a474e
let
	res_fp64 = fd_hamiltonian(v_chain, 5, 1; T=Float64)
	res_fp32 = fd_hamiltonian(v_chain, 5, 1; T=Float32)
	ref = SymTridiagonal([8.45798, 6.9536, 5.80846, 6.9536, 8.45798], -4.5ones(4))

	if res_fp64 == Diagonal(ones(200))
		warning_box(md"Replace `Diagonal(ones(200))` by your answer")
	elseif maximum(abs, ref .- res_fp64) > 1e-3
		keep_working()
	elseif !type_eq(res_fp64, SymTridiagonal{Float64, Vector{Float64}})
		almost(md"Almost there. Make sure to return a `SymTriagonal` instead of dense matrices though. Otherwise the numerics will be too challenging.")
	elseif !type_eq(res_fp32, SymTridiagonal{Float32, Vector{Float32}})
		almost(md"Almost there. Only the types are not yet quite right when T=Float32")
	end
end

# ╔═╡ 1a0e7da6-ac7c-4b52-a4c9-dc4a514d3b98
md"""
**(b)** The following code performs a benchmark of the matrix returned by `fd_hamiltonian` for $N_b = 500$:
"""

# ╔═╡ d1d72977-f3fb-405e-aa2b-aac10980ada5
let
	H = fd_hamiltonian(v_chain, 500, 4);
	x = randn(size(H, 2))
	@btime $H * $x
end

# ╔═╡ 896f53c6-4ea1-4e2b-8c6b-e0fa99123cc6
md"""
Perform the same benchmarks for the `\` (backslash operator, `H \ x`) with a random vector. Repeat with a factorised form of the Hamiltonian (`factorize(H)`). Also repeat all three benchmarks when you take `H` to be a random dense matrix (`H = randn(500, 500)`) instead of the matrix returned by `fd_hamiltonian`. What do you observe? Comment on the balance of timings between `*` and `\` (in both factorised and unfactorised form). Can you describe why it is helpful to employ `SymTridiagonal` to exploit the special structure of our discretised Hamiltonian ?

*Hint:* It might be helpful to read up on `@btime` and `@benchmark` to understand the syntax of `@btime`, especially the implications of the `$`.
"""

# ╔═╡ 73863ff6-818f-4e3a-8bdf-b8251a5e3a2e
md"""
**Solution:**
"""

# ╔═╡ 16aa3488-59f9-44c7-a4b1-b6a8544b9b13
begin
	H = fd_hamiltonian(v_chain, 500, 4);
	x = randn(size(H, 2));
	H_factorized = factorize(H);

	@btime $H * $x
	@btime $H \ $x
	@btime $H_factorized \ $x
end

# ╔═╡ ce4a4e31-9a65-4528-bf11-e90ba885a4c3
begin
	H_dense = randn(500, 500);
	H_dense_factorized = factorize(H_dense);

	@btime $H_dense * $x
	@btime $H_dense \ $x
	@btime $H_dense_factorized \ $x 
end

# ╔═╡ b1f15f78-ba57-45b7-80c9-8214a446b199
md"""
Observations:
- We can see that for both the specially structured matrix returned by `fd_hamiltonian` and a randomly generated dense matrix matrix-vector multiplication (`*`) is faster than the backslash operator (`\`).
- Using `SymTridiagonal` for the specific structure of the discretized Hamiltonian reduces storage needs and makes calculations more efficient. It also enables faster matrix-vector multiplications through optimized algorithms.
- The factorized form of the Hamiltonian (`factorize(H)`) speeds up the backslash operator in both cases: applied to structured matrix H and a randomly generated dense matrix.
"""

# ╔═╡ 6e4a24c5-f699-4c8d-b6b2-89fbec78662e
begin
	H_mult = @benchmark $H * $x
	H_div=@benchmark $H \ $x

	H_dense_mult=@benchmark $H_dense * $x
	H_dense_div=@benchmark $H_dense \ $x
end

# ╔═╡ 3feee600-5458-4e2c-98f0-dfe7e4332708
begin
	bar(["H * x", "H backslash x", "H_dense * x", "H_dense backslash x"], 
		[Float64(median(H_mult).time), Float64(median(H_div).time), Float64(median(H_dense_mult).time), Float64(median(H_dense_div).time)],   xlabel="Operation", ylabel="Time [ns]", 
		yaxis=:log, labels="time", 
		title="Matrix Vector operations median time benchmark")
end

# ╔═╡ ce856df3-29b8-4e95-89a5-86de6f29a14a
md"""
**(c)** In one of the later code boxes a copy of the `lobpcg` routine of the lectures is defined. Use this function to find the 3 smallest eigenpairs of the discretised Hamiltonian with `v_chain` as the potential. Use $a = 4$ and $N_b = 500$ and converge until `tol = 1e-6`. Try to experiment a bit with the preconditioners available to you. Take a look at the lecture on diagonalisation routines to get some inspiration. You should find that a good preconditioner is crucial to get this problem to converge within 20--30 iterations. Make sure that with your setup the convergence in 20--30 iterations is stable with respect to increasing $N_b$.
"""

# ╔═╡ 972f791a-f9d2-4d70-a81c-0bc536d3bdc0
md"""
**Solution:**
"""

# ╔═╡ 4db84a39-89f2-449e-a340-4a8012a71017
md"""**Preconditioner Noise Level:** `log_prec_noise` = $(@bind log_prec_noise PlutoUI.Slider(-3:0.1:-1.5, default=-2.5, show_value=true))
"""

# ╔═╡ e2a514d7-e71e-472e-b127-af2783167dad
md"""
-------------------
"""

# ╔═╡ 032e67ec-8614-4403-958f-2aea77c0a80f
md"""
## Orthogonalisation routines

In a physical investigation one would want to run many diagonalisations to investigate different chains by varying their length or their parameters $α$ and $σ$. We can thus expect that many eigenpair computations are necessary, justifying to study the overall performance of our diagonalisation routines.

In the lecture about diagonalisation algorithms we discussed a basic LOBPCG algorithm. In this implementation we used QR factorisation as a way to orthonormalise the columns of a matrix $X \in \mathbb{R}^{n \times p}$ with $p \ll n$:
"""

# ╔═╡ 4a6de877-7866-4d22-87a3-5720fab2ea38
ortho_qr(X) = Matrix(qr(X).Q)

# ╔═╡ d9f48fc4-f2a0-4a8f-aa84-3c7eef772957
md"""
The idea here was that QR factorisation $X = Q R$ produces an orthogonal matrix $Q$ and a upper-triangular matrix $R$, such that we may just drop the $R$ and return the $Q$ itself.

Based on this approach we repeat an LOBPCG implementation here, along with timers to track the time the algorithm spends in key parts:
"""

# ╔═╡ 970d53ef-012e-4218-ba52-a89f6929f909
const to = TimerOutput();  # Setup the timer to track timings

# ╔═╡ b9483d16-0d06-4ae4-9e51-0b86c26489f6
@timeit to function lobpcg(A; X=randn(eltype(A), size(A, 2), 2), ortho=ortho_qr,
                              Pinv=I, tol=1e-6, maxiter=100, verbose=true)
	T = real(eltype(A))
	m = size(X, 2)  # block size

	eigenvalues    = Vector{T}[]
	residual_norms = Vector{T}[]
	λ = NaN
	P = nothing
	R = nothing
	
	for i in 1:maxiter	
		if i > 1
			Z = hcat(X, P, R)
		else
			Z = X
		end
		@timeit to "Orthogonalisation" begin
			Z = ortho(Z)
		end

		@timeit to "Matrix-vector products" begin
			AZ = A * Z
		end

		@timeit to "Rayleigh-Ritz step" begin
			λ, Y = eigen(Hermitian(Z' * AZ))
		end	
		λ = λ[1:m]
		Y = Y[:, 1:m]
		new_X = Z * Y

		@timeit to "Residual computation" begin
			R = AZ * Y - new_X * Diagonal(λ)
			norm_r = norm.(eachcol(R))
		end
		push!(eigenvalues, λ)
		push!(residual_norms, norm_r)
		verbose && @printf "%3i %8.4g %8.4g\n" i λ[end] norm_r[end]
		maximum(norm_r) < tol && break

		@timeit to "Preconditioning" begin
			R = Matrix(Pinv * R)
		end
		P = X - new_X
		X = new_X
	end

	(; λ, X, eigenvalues, residual_norms)
end

# ╔═╡ 2cd96b11-41e9-4f37-a509-1c9f80e68159
begin
	a = 4
	Nb = 500
	tol = 1e-6
	H_fd = fd_hamiltonian(v_chain, Nb, a)
	
	n = 3 
	X0 = randn(size(H_fd, 2), n)
	
	# Perfect preconditioner
	precond = diagm(1.0 ./ diag(H_fd))
	eigenvalues, eigenvectors = lobpcg(H_fd; X = X0, verbose = false, tol = tol, maxiter = 30, Pinv = precond)

	println("Eigenvalues: ", eigenvalues)
	println("Eigenvectors: ", eigenvectors)
end

# ╔═╡ e28a9c9c-9efd-473a-9ef5-9ec37273ce36
begin
	p = plot(yaxis=:log,title=string(lobpcg) * ": different preconditioners" ,xlabel="Number of iterations",ylabel="Maximum residual norm")

	# Perfect preconditioner
	inv_diag_residual_norms = lobpcg(H_fd; X = X0, verbose = false, tol = tol, maxiter = 30, Pinv = precond).residual_norms
	max_rnorm_perfect=[maximum(r_norms) for r_norms in inv_diag_residual_norms] 
	plot!(p, max_rnorm_perfect; label = "Perfect preconditioner", lw = 2,mark = :x)

	# Preconditioner plus noise
	prec_noise = 10 ^ log_prec_noise * randn(size(H_fd, 1))
	noisy_precond = Diagonal(1 ./ diag(H_fd) .+ prec_noise)
	noisy_rnorms = lobpcg(H_fd; X = X0, verbose = false, tol = tol, maxiter = 30, Pinv = noisy_precond).residual_norms
	max_rnorm_noisy=[maximum(r_norms) for r_norms in noisy_rnorms]

	plot!(p, max_rnorm_noisy; label = "Noisy preconditioner", lw = 2,  		ls = :dash, mark = :x)

	# Apgd preconditioner
	Alopcg = Diagonal(abs.(randn(Nb)).^0.1);
	Pinv = Diagonal(1 ./ diag(Alopcg))  # Diagonal preconditioner for Apgd    
	apgd_rnorms = lobpcg(H_fd; X = X0, verbose = false, tol = tol, maxiter = 30, Pinv).residual_norms
	max_rnorm_apgd=[maximum(r_norms) for r_norms in apgd_rnorms]

    plot!(p, max_rnorm_apgd; label = "apgd preconditioner", lw 	= 2, ls = :dash, mark = :x)
end

# ╔═╡ a867c1e4-5ccf-45d5-a81e-8d40ae6ad397
md"With the following routine we run this algorithm for a test problem, which we take from the matrix depot, track and print its timings:"

# ╔═╡ d8cda517-503a-404f-95a5-ae2ce20142f4
function runtime_lobpcg(n::Integer)
	H = fd_hamiltonian(v_chain, n, 4);
	X = randn(eltype(H), size(H, 2), 10)
	Pinv = InverseMap(factorize(H))

	reset_timer!(to)
	lobpcg(H; Pinv, X, verbose=false)
	to
end

# ╔═╡ 382e10a8-cf84-4e1e-839e-b99bc1026de2
md"In this case, where matrix-vector products are extremely cheap, for small problem sizes the Rayleigh-Ritz step is *usually* the most expensive (about 50%) with the Orthogonalisation being a close second (about 30%). 

*Note* that the timings and their ratios may look a little different on your machine, which is fine.
"

# ╔═╡ ab95631c-2ed2-4da7-805a-65a937b9cec9
runtime_lobpcg(100)

# ╔═╡ d682a2ec-05d0-44ef-ae76-09fde8e5aa94
md"However, as we increase the problem sizes, the Orthogonalisation starts to dominate more and more:"

# ╔═╡ 49bac334-3b83-4358-af74-d5e4ed760160
runtime_lobpcg(500)

# ╔═╡ 39cdf82e-c2fd-489b-8b84-cfd049ec1975
runtime_lobpcg(5000)

# ╔═╡ 5dd3ff9d-06cd-4cfa-abae-018abacd867a
md"This motivates to take a closer look at orthogonalisation routines as a way to make LOBPCG computations cheaper for larger systems."

# ╔═╡ b5229952-300c-493d-9d4c-d40ba0c040de
md"""
*Note:* For more involved problems (e.g. electronic structure computations) the matrix-vector products are usually the dominating step, such that the orthogonalisation takes a smaller fraction of the overall runtime. Still, even in those settings the cost of orthogonalisations can usually not be completely neglected.
"""

# ╔═╡ 83f571d8-f375-4ca0-bb94-43681cef4fba
md"""
### Task 3: Gram-Schmidt procedure

A classical approach to orthogonalising a set of vectors is the [Gram-Schmidt procedure](https://en.wikipedia.org/wiki/Gram%E2%80%93Schmidt_process). 

Given a matrix $X \in \mathbb{R}^{n \times p}$ with $p \ll n$ a naive implementation using Gram-Schmidt to orthonormalising its columns is
"""

# ╔═╡ 35db6cc1-3fb6-4008-9712-d027c8293bde
@views function ortho_gs(X)
	Xnew = copy(X)
	for i in 1:size(X, 2)
		for j in 1:(i-1)
			Xnew[:, i] .-= Xnew[:, j] * dot(Xnew[:, j], X[:, i])
		end
		Xnew[:, i] ./= norm(Xnew[:, i])
	end
	Xnew
end

# ╔═╡ 64674532-7153-44da-b67c-6ce1ff1ba21c
md"where the `@views` macro is used to suppress the copies Julia usually performs when accessing slices of vectors or matrices with `[ ... ]`."

# ╔═╡ 3246102a-29c2-47a8-8cb6-2215447c655e
md"""
**(a)** A simple benchmark using [BenchmarkTools](https://github.com/JuliaCI/BenchmarkTools.jl) of the above `ortho_gs` function for orthogonalising a random matrix of size $1000 \times 10$ yields
"""

# ╔═╡ 468e1424-9204-4ea7-996d-c18747d6ed59
let
	X = randn(1000, 10);
	@benchmark ortho_gs($X)
end

# ╔═╡ 9532eabd-8888-4054-be04-136916bfb2ec
md"""
This is not bad, but this can still be improved. One idea is to remove the inner loop over `j`. This can be achieved by using matrix-matrix products instead of vector-only operations. Since matrix-matrix operations are generally faster, this gives a speedup. Rewrite `ortho_gs` by using to a larger extend matrix-matrix operations. Call the new function `ortho_gs_matrix`. Benchmark this second function as well. Compare the runtime of both functions to `ortho_qr`. How much faster is Gram-Schmidt compared to QR?
"""

# ╔═╡ c4517741-dd2f-4cbc-a0b1-75f3b9cd7060
@views function ortho_gs_matrix(X)
    Xnew = copy(X)
    n, m = size(Xnew)

	Xnew[:, 1] ./= norm(Xnew[:, 1])

    for i in 2:m
		projections = Xnew[:, 1:(i-1)]' * Xnew[:, i]
		Xnew[:, i] .-= Xnew[:, 1:(i-1)] * projections
        Xnew[:, i] ./= norm(Xnew[:, i])
    end
    Xnew
end

# ╔═╡ 9b66f88c-667f-45bc-9d54-8c97966edd01
begin
	X = randn(1000, 10);
	result_gs = @benchmark ortho_gs($X)
	result_gs_matrix = @benchmark ortho_gs_matrix($X)
	result_qr = @benchmark ortho_qr($X)

	println("Orthogonal GS Time: ", mean(result_gs).time)
	println("Ortho GS Matrix Time: ", mean(result_gs_matrix).time)
	println("Ortho QR Time: ", mean(result_qr).time)
end

# ╔═╡ 2c682b30-f257-4094-a75e-81c1737b81dd
mean(result_qr).time / mean(result_gs_matrix).time

# ╔═╡ 8bcc2985-c1cc-4790-8303-406c61f1cead
md"""
We can see that Gram-Schmidt is approximately 3 times faster compared to QR.
"""

# ╔═╡ d1b1ee12-479c-4b46-b008-30be3f3edfec
md"""
**(b)** Motivated by the speedup of Gram-Schmidt methods we want to employ `ortho_gs` and `ortho_gs_matrix` within our `lobpcg`. This can be achieved by setting the `ortho` keyword argument appropriately (e.g. `lobpcg(...; ortho=ortho_gs)`). Focus on computing the $4$ smallest eigenpairs of the testproblem `Htest()` to `tol=1e-8` --- using again its factorised form as a preconditioner.
"""

# ╔═╡ 2bbd3188-1ee5-4ea6-90a3-2fa373a6ef78
md"""
What do you notice with the Gram-Schmidt-based orthogonalisation? Do we win something using this faster technique? Plot the convergence history of the largest eigenpair when using `ortho_qr` and `ortho_gs`. Try to find an explanaition for the observed behaviour. *Hint:* Part (c) might be helpful.
"""

# ╔═╡ 9c55be21-4168-49bd-bfc0-bfeb241d1dde
md"""
**Answer:**
"""

# ╔═╡ 272b2df8-a19f-4be8-979d-68a4224816fe
begin
	Htest(T=Float64) = fd_hamiltonian(v_chain, 4000, 4; T);
	X1 = randn(eltype(Htest()), size(Htest(), 2), 4)
	precond_inv = InverseMap(factorize(Htest()))
end

# ╔═╡ 244679dc-2ae6-4dee-b4e9-05bdec67b202
md"""
Analyzing the plots we can see that while Gram-Schmidt is faster computationally, it may have numerical stability issues compared to QR orthogonalization. 
"""

# ╔═╡ a7955af9-0c88-4bcd-94e2-903e7dc0027c


# ╔═╡ 92f4c1fe-010b-429c-a83f-23bf21daae2b
md"""
**(c)** Next we want to test the numerical stability of our orthogonalisation routines. Challenging problems for orthogonalisation arise in particular if the vectors are very similar, e.g. if their entries are within the same numerical range. With this in mind argue why the routine
"""

# ╔═╡ 92cf9a34-51ac-4767-94d2-f5013b6f1a94
testmatrix(m; T=Float64, N=1000, M=10) = abs.(randn(T, N, M)) .^ T(m)

# ╔═╡ 8c35343c-546c-4d30-b59b-4d66ae67fe61
md"""
is a good way of generating challenging benchmark matrices for orthogonalisation routines. *Hint:* Plot the numerical range using the `extrema` function for values $m \in (0, 1)$. 

**Answer:**
"""

# ╔═╡ ff837238-03cd-4fdb-bd57-24cf0d60643b
begin
	msteps = 0:0.01:1
	ranges = [extrema(testmatrix(m)) for m in msteps]

	lower_bounds = [r[1] for r in ranges]
	upper_bounds = [r[2] for r in ranges]
	
	means = [mean(r) for r in ranges]
	
	# Create the plot with means, lower bounds, and upper bounds
	plot(msteps, means, ribbon=(abs.(lower_bounds .- means), abs.(upper_bounds .- means)), fillalpha=0.2, alpha=0., xlabel="m", ylabel="Numerical Range", label="Numerical Range")
	plot!(msteps, lower_bounds, label="Lower bounds")
	plot!(msteps, upper_bounds, label="Upper bounds")
end

# ╔═╡ b3fb67b3-ac8f-4836-b795-252d08bb39ec
md"""
If vectors are very similar, especially when their entries are within the same numerical range, numerical errors may accumulate, leading to loss of orthogonality or other stability issues. In such cases, using Gram-Schmidt orthogonalization methods might be problematic due to the ill-conditioning of the vectors.

The `testmatrix` function is useful for creating matrices that test orthogonalization routines, helping to find numerical stability problems and assess the strength of the implemented algorithms.




"""

# ╔═╡ ff592eef-e31b-4865-bfb0-19a283de20c4
md"""
**(d)** Test `ortho_gs` and `ortho_qr` for various values of $m$, i.e. check the orthonormality error `maximum(abs, X'*X - I)` after having orthogonalised test matrices with various values of $m$. Plot this error for both methods versus $m$ in the range $10^{-16}$ to $1$. What do you notice in particular for the challenging cases ?
"""

# ╔═╡ f57a5576-345e-4012-aa96-fd84f9bf4e7f
md"""
**Answer:**
"""

# ╔═╡ 3ffe6928-30e2-4142-8a34-e7874999c147
orthonormality_error(X) = maximum(abs, X' * X - I)

# ╔═╡ e8619c00-0ee9-4af3-bb4b-5458cdba0f31
md"""
In challenging cases, we can observe higher orthonormality errors that indicate the difficulty of maintaining orthonormality using Gram-Schmidt procedure when the entries of the vectors are within the same small numerical range.
"""

# ╔═╡ affd0b8f-2b57-40d9-87e1-43de738c0778
md"""
**(e)** The observed behaviour is a well-known flaw of the standard Gram-Schmidt procedure. A simple and common modification improves the situaton notably. This is known as the *modified Gram-Schmidt procedure* (MGS), which is described for example [on wikipedia](https://en.wikipedia.org/wiki/Gram%E2%80%93Schmidt_process). Code up an MGS and call the function `ortho_mgs`. Add `ortho_mgs` to your plots in **(b)** and **(d)**. You should observe that the overall behaviour improves.
*Hint:* Compared to `ortho_gs` you don't have to change much.
"""

# ╔═╡ 9895d1a2-5019-405e-966b-105dce803aa1
md"""
**Answer:**
"""

# ╔═╡ d7259bc9-8b9a-47a6-85af-dfa06eb94849
@views function ortho_mgs(X)
	Xnew = copy(X)
	for i in 1:size(X, 2)
		for j in 1:(i-1)
			Xnew[:, i] .-= dot(Xnew[:, i], Xnew[:, j]) * Xnew[:, j]
		end
		Xnew[:, i] ./= norm(Xnew[:, i])
	end
	Xnew
end

# ╔═╡ b0853a92-4975-4295-ba5e-692086b0993f
begin
	res_qr = lobpcg(Htest(); X=X1, Pinv=precond_inv, ortho=ortho_qr, tol=1e-8, maxiter = 30, verbose=false)
	res_gs = lobpcg(Htest(); X=X1, Pinv=precond_inv, ortho=ortho_gs, tol=1e-8, maxiter = 30, verbose=false)
	res_mgs = lobpcg(Htest(); X=X1, Pinv=precond_inv, ortho=ortho_mgs, tol=1e-8, maxiter = 30, verbose=false)
	
	rnorm_qr=[norms[1] for norms in res_qr.residual_norms]
	rnorm_gs=[norms[1] for norms in res_gs.residual_norms]
	rnorm_mgs=[norms[1] for norms in res_mgs.residual_norms]

	plot(rnorm_qr, label="QR Orthogonalization", yaxis=:log, xlabel="Iterations", ylabel="Residual Norm", lw=2)
	plot!(rnorm_gs, label="Gram-Schmidt Orthogonalization", yaxis=:log, lw=2)
	plot!(rnorm_mgs, label="Modified Gram-Schmidt Orthogonalization", yaxis=:log, lw=2)
end

# ╔═╡ 8df30591-c27c-449a-8d2f-361db4a8153b
begin
	error_gs = Float64[]
	error_mgs = Float64[]
	error_qr = Float64[]

	mrange = 10.0 .^ range(-16, stop=0, length=100)
	
	for m in mrange
	    X = testmatrix(m)
	    gs_result = ortho_gs(X)
	    qr_result = ortho_qr(X)
		mgs_result = ortho_mgs(X)
	    
	    push!(error_gs, orthonormality_error(gs_result))
	    push!(error_qr, orthonormality_error(qr_result))
		push!(error_mgs, orthonormality_error(mgs_result))
	end
	
	plot(mrange, error_gs, label="ortho_gs", xlabel="m", xaxis=:log10, ylabel="Orthonormality Error", legend=:topleft)
	plot!(mrange, error_qr, label="ortho_qr", xticks=10.0 .^ (-16:2:0))
	plot!(mrange, error_qr, label="ortho_mgs", linestyle=:dash)
end


# ╔═╡ 17ca9f09-3a3f-40e0-9314-94ce8e5f36b8
md"""
Analyzing the plots above, we can see that the modified Gram-Schmidt procedure doesn't give high orthonormality errors and on the tested examples is as good as QR method. On the other hand, MGS doesn't show a big improvement within our lobpcg algorithm.
"""

# ╔═╡ 6d49ed54-f809-470f-83c9-65e40871db51
md"""
----------
"""

# ╔═╡ dfd18ddd-a9e4-460a-97c4-07afbb83f4f2
md"""
### Task 4: Cholesky-based orthogonalisation

Another approach to orthogonalise columns of matrices is based on cholesky factorisation. The idea is that for any matrix $X \in \mathbb{R}^{n \times p}$ with $p \ll n$ the matrix $X^H X$ --- the overlap or Gram matrix --- is symmetric and positive definite. 
As a result we can perform a Cholesky decomposition into a lower-triangular matrix $L$ such that $X^H X = L L^H$. A set of orthonormal vectors is then given by $X \left(L^H)^{-1}\right)$.
"""

# ╔═╡ a6f782cb-27b3-45a3-8b0e-23681406abef
md"""
**(a)** 
Given an arbitrary $X \in \mathbb{R}^{n \times p}$ and Cholesky factors $L$ such that $X^H X = L L^H$, prove that $X \left(L^H)^{-1}\right) \in \mathbb{R}^{n \times p}$ is indeed orthogonal.
"""

# ╔═╡ 110aaa6e-3cad-4374-a95f-2f3dbbfc37e6
md"""
**Proof:**

Let $M = \left(L^H\right)^{-1}$ and consider the product:

```math
\left( X M \right)^H X M = M^H (X^H X) M = M^H (L L^H) M = \left(\left(L^H\right)^{-1}\right)^H L L^H \left(L^H\right)^{-1} = I,
```
since the conjugate transpose of a real lower triangular matrix is its inverse. On the other hand,

```math
X M \left( X M \right)^H  = X M M^H X^H = X \left(L^H\right)^{-1} L^{-1} (L L^H) M = \left(\left(L^H\right)^{-1}\right)^H L L^H \left(L^H\right)^{-1} = I
```

As a result, we have:
```math
\left( X \left(L^H\right)^{-1} \right)^H X \left(L^H\right)^{-1} = I,
```
which means that $X \left(L^H\right)^{-1}$ is indeed orthogonal.
"""

# ╔═╡ cb9d5564-6c68-4a6d-be6f-ad64a46da045


# ╔═╡ 50e2baea-317d-43d5-82a2-df63936ddefd
md"""
**(b)** Look up how the `cholesky` function works in Julia and use it to code up an `ortho_cholesky(X)`, which orthonormalises the columns of the passed matrix `X`. Benchmark `ortho_cholesky` on a `X = randn(1000, 10)` testmatrix and compare the timings to `ortho_qr` and `ortho_gs_matrix`. Can you explain the appealing feature of this method?
"""

# ╔═╡ 97dce896-28bd-4e74-8ba9-cc9ff3b181c2
md"""
**Answer:**
"""

# ╔═╡ 3c1849b8-6345-4cdf-875a-a32ba455516b
md"""
**(c)** Now run `ortho_cholesky` on `testmatrix(m)` for various values of $m$. You should notice this method to fail for too small values of $m$ (`PosDefException`), because $X^H X$ is numerically no longer positive definite. By computing the eigenspectrum of `X^H X` check exactly what happens as $m$ gets smaller. With this in mind add `ortho_cholesky` to your plot in Task 3 (d) by truncating the range of $m$ appropriately for `ortho_cholesky`. How does it perform in contrast to the other methods we discussed so far?
"""

# ╔═╡ eedff6d1-e11b-43e4-a3d1-a04e44f65fc5
md"""
**(d)** To avoid the breakdown of cholesky-based orthogonalisation approaches, a typical trick is to apply the cholesky factorisation to $X^H X + β * I$ instead of $X^H X$, where $β > 0$ is a small constant. With the $L L^H$ factorisation at hand one then forms $\tilde{X} = X \left(L^H)^{-1}\right)$ as usual. $\tilde{X}$ is now not yet orthogonal, but its closer than $X$ is. A second application of (unshifted) `ortho_cholesky` to $\tilde{X}$ is then performed to finally obtain a matrix with orthonormal columns. Code up this procedure for $β=1$ as the function `ortho_shift_cholesky` and add it to the plot in Task 3 (d). You should again need to truncate the range of $m$ to avoid a `PosDefException`, but much smaller values for $m$ should be feasible. 
"""

# ╔═╡ baa15be1-4aaf-4789-95d6-c08c918cb245
md"""
**(e)** A more sophisticated implementation of the idea of (d) is provided in the DFTK.jl package as the `DFTK.ortho!` function. Benchmark this function on a `X = randn(1000, 10)` testmatrix and add it to the plot in Task 3 (d) as well.
"""

# ╔═╡ 5fdd20df-4b7e-43f1-8d14-fdbfad544f6d
ortho_dftk(X) = DFTK.ortho!(copy(X)).X

# ╔═╡ 512200e7-9230-4469-b5f4-4855c7754c95
md"""
-----------
"""

# ╔═╡ c71766f8-0f7f-499b-a1aa-37cfd6233735
md"""
### Task 5: Conclusion on orthogonalisation methods

In our discussion so far one main orthogonalisation approach is missing, namely singular value decomposition. Given a matrix $X \in \mathbb{R}^{n \times p}$ the singular value decomposition $X = U \Sigma V^H$ produces two orthogonal matrices  $U \in \mathbb{R}^{n \times m}$, and $V \in \mathbb{R}^{m \times p}$ as well as a diagonal matrix $\Sigma \in \mathbb{R}^{m \times m}$ with possibly $m < p$.
"""

# ╔═╡ 6450e4ce-a827-4d8b-8d26-0921eea7a5bf
md"""
**(a)** 
Code up such an orthogonalisation routine `ortho_svd` based on Julia's `svd` funciton. Look up its documentation to get more details. Benchmark `ortho_svd` on  `X = randn(1000, 10)` and add this function to  your plot of Task 3 (d).
"""

# ╔═╡ 49f347c3-0e77-4a1f-9bef-08a7e15b9149
md"""
**(b)** You should now have a good overview of the runtimes and qualities of the orthogonalisation algorithms `ortho_gs_matrix`, `ortho_mgs`, `ortho_qr`, `ortho_svd`, `ortho_cholesky`, `ortho_shift_cholesky` and `ortho_dftk`.
With this in mind try to explain the recent popularity of cholesky-based approaches like `ortho_dftk` for othogonalising vectors. If no cholesky-based approach should be chosen (i.e. `ortho_cholesky`, `ortho_shift_cholesky` and `ortho_dftk` are out), which other approach provides in your opinion the best compromise between runtime and accuracy and why?
"""

# ╔═╡ 14faf0a3-d7da-485c-b5e6-cee1f24592ac
md"""
In the following we will only employ `ortho_dftk` in combination with `lobpcg` as our main diagonalisation routine.

--------------------
"""

# ╔═╡ 0098759c-76f5-4749-ad97-0db3745bfda4
md"""
## Mixed-precision techniques
"""

# ╔═╡ 41d4f20f-d01e-4a4f-8d2f-da7a140a2bd8
md"""
### Task 6: Low-precision initial guess

Lower precision generally leads to faster computations. Higher precision generally leads to more accurate results. A natural idea is thus to chain computations at multiple precisions to get the best out of both worlds. 
"""

# ╔═╡ 0f913723-86a8-407e-84be-5e5a607a2ead
md"""
**(a)** Using the `lobpcg` routine in combination with `ortho_dftk` as the orthogonalisation, and the factorisation of the Hamiltonian as the preconditioner, determine roughly the highest accuracy (smallest residual norm) to which the lowest three eigenpairs of `Htest(T)` can be determined if `Float32`, `Float64` and `Double64` are used as the floating-point precision. Since the outcome is strongly dependent on the problem and setup, only an order of magnitude estimate is required here. The best way to obtain this is to repeat your experiments a few times. For `Double64` there is no need to go below `tol=1e-25`. 

In each run use the *the same* initial guess for each floating-point precision `T` to make the residual history comparable. However, ensure to convert this guess to the same floating-point precision before passing it to  `lobpcg` (e.g. `lobpcg ...; X=Float32.(X), ...`). In one plot, show the residual norm history of the largest of the three eigenpairs (`last.(lobpcg( ... ).residual_norms)`) depending on the chosen floating-point precision `T`.

From your experiments: Roughly at which residual norm is it advisable to switch from one precision to the other in order to avoid impacting the rate of convergence ?
"""

# ╔═╡ 2e02d881-40df-4559-82a9-f6a11239f337
md"""
**(b)** With this outcome in mind code up a routine `solve_discretised(V, Nb, a; n_ep=3, tol32=XXX, tol=1e-6, maxiter=100)`, which first constructs the Hamiltonian using `fd_hamiltonian(V, Nb, a; T=Float32)` and then uses a preconditioned `lobpcg` to solve it for `n_ep` eigenpairs until `tol32` is reached, starting from a random guess. Then it switches to `Float64` as the working precision and continues the iterations by invoking `lobpcg` a second time. Note that for this you will need to recompute the Hamiltonian in `Float64`. Make sure the named tuple returned by the second call to `lobpcg` is also returned by `solve_discretised` itself. 
In your implementation replace `tol32=XXX` by a sensible default value for `tol32`.

Explain why you have to recompute the Hamiltonian with `T=Float64` instead of simply converting the `Float32` Hamiltonian. Is there a way to avoid computing the Hamiltonian twice ?
"""

# ╔═╡ 0722bcc9-2dde-4289-8c7b-c6e3816281ff


# ╔═╡ 49b6eed8-da2f-48cf-952a-7bdbd46e6469


# ╔═╡ 32263be1-05bc-441e-b220-fa2f2aa8c052
md"""
## Bounds on algorithm and arithmetic error

Finally before we try `solve_discretised` in action, we want to develop techniques to estimate the algorithm and arithmetic error of this method.

### Task 7: Estimating algorithm and arithmetic error

By construction our `solve_discretised` routine drives the residual of the targeted eigenpairs to zero. If we therefore compute the residual norms
```math
\|r_i\| = \| H_i \, x_i - λ_i \, x_i \|
```
for the returned eigenpairs $(λ_i, x_i)$ in the same working precision (here `Float64`) this value is smaller than the selected `tol` *by construction*. However this could be an artificial outcome due to the finite-precision arithmetic. To estimate the arithmetic error we will therefore re-compute this residual norm using interval arithmetic.

**(a)** Write a function `fd_hamiltonian_interval(V, Nb, a)`, which obtains the discretised Hamiltonian in the form of `Float64` intervals enclosing the exact matrix elements (i.e. the elements without arithmetic error). There are multiple ways one could do this. By far the simpliest is to run `fd_hamiltonian` using `T=BigFloat` to get a highly accurate representation of the matrix elements, then convert each element to `Float64` intervals using the function
"""

# ╔═╡ cdfab704-98c0-4f5a-b3b1-f9892b926f78
let
	values = BigFloat[π ℯ;  # dummy, for illustration here
	                  0 1]
	@show values
	
	interval.(Float64, values)
end

# ╔═╡ ba83ffcc-662e-41e0-b875-ed42c89018f3
md"""
**(b)** Use `fd_hamiltonian_interval` to code up the function `residual_norms_interval(V, λ, X, Nb, a)`,
which gets the solution eigenpairs `λ` and `X` in `Float64`
as returned in the named tuple of `solve_discretised` and computes their residual norms using interval arithmetic. The return value should be a vector of $n$ intervals if $n$ eigenpairs are passed to the function. Test your function on the result of `solve_discretised` for `v_chain`, `Nb = 1000`, `a = 4` and `n_ep=3`. You should obtain narrow intervals with upper and lower bounds around the value chosen for `tol`.
"""

# ╔═╡ 46578541-6513-4236-bcdc-2eba4b821ca0
md"""
Recall that the residual norm itself is one of the main ingredients to obtain an upper bound to the error of the eigenvalue (see the Bauer-Fike and Kato-Temple bounds). Furthermore the intervals obtained from interval arithmetic are guaranteed to enclose the exact result (the result if *exact arithmetic* was employed). Therefore if we denote the exact residual norm by $\|r_i\| > 0$ and the returned intervals from `residual_norms_interval` by $\big[\|r_i\|_\text{lo}, \|r_i\|_\text{hi}\big]$, we are guaranteed to have $\|r_i\|\in \big[\|r_i\|_\text{lo}, \|r_i\|_\text{hi}\big]$. A guaranteed upper bound to the residual norm accounting for both algorithm *and* arithmetic error is thus to employ $\|r_i\|_\text{hi}$ instead of $\|r_i\|$. From an interval `pi_inter` this can be extracted as such:
"""

# ╔═╡ 232061e4-da8c-42d6-9801-23e724d7502c
let
	pi_inter = interval(π)
	pi_inter.hi
end

# ╔═╡ df7d3c42-4956-4b36-a9bc-e8fb0f0ce2f1
md"""
In turn the width of the interval $ρ^\text{hi}_i - ρ^\text{lo}_i$. --- also called radius --- provides an upper bound to the arithmetic error in the residual computation, which by the Bauer-Fike bound provides an upper bound to the arithmetic contribution to the eigenvalue error. This width can be obtained as
"""

# ╔═╡ bf63a030-eba0-420e-9209-e05016f3eca3
let
	pi_inter = interval(π)
	radius(pi_inter)
end

# ╔═╡ e0e06f34-9d43-442a-82ca-fe0f7501511f
md"""

**(c)** Using the computational setup of (b) estimate a guaranteed upper bound to the residual norms $\|r_i\|$ for each eigenpair use this in conjunction with the Kato-Temple bound to estimate an upper bound for the combined algorithm and arithmetic error of the first eigenvalue. You may assume that `lobpcg` did not miss any eigenpair, i.e. indeed returns approximations to the first three eigenpairs.

**(d)** Use the width of the residual interval as an estimate for the arithmetic error in the first eigenvalue. In combination with (c) can you clearly say which contribution dominates ?

----------------------
"""

# ╔═╡ b73829c8-c833-45a4-b168-d68e9b54547f
md"""
## Computing the effect of tunnelling

Finally we have everything in place to return to our original problem, namely computing the tunnelling energy for the chain of three atoms with
```math
v^\text{chain}(x) = v^\text{atom}(x - 2) + v^\text{atom}(x) + v^\text{atom}(x + 2)
```
and $v^\text{atom}$ being the Gaussian potential with $α = 2$ and $σ = 1/4$.
Pictorially:
"""

# ╔═╡ e5e1630d-7d9e-43da-8da9-4c437e615e71
let
	p = plot(v_chain, label="v_chain")
	plot!(p, v_atom, label="v_atom")
end

# ╔═╡ 264ce53d-40ff-4ae7-838e-49078f6d1ef1
md"""
### Task 8: Putting it all together

**(a)** Solve both (CL) and (QM) employing `solve_discretised` for the first $3$ eigenpairs in each case. Converge your calculations with respect to $a$ and $N_b$ until you obtain the tunnelling energy $Δε$ to $5$ digits.

*Hint:* A good strategy is to first select a reasonable value for $N_b$, then keep $h = \frac{2a}{N_b - 1}$ fixed and converged wrt. $a$, then use that value for $a$ to converge wrt. $N_b$ (by decreasing $h$), then repeat until the desired tolerance is found.
"""

# ╔═╡ a18370bd-e054-4fe5-840a-1638ad4fbca2
md"""
**(b)** Employ the Kato-Temple bound employed in Task 7 (c) to verify that the combined algorithm and arithmetic error of $Δε$ is less than the $3$ digits of convergence, i.e. that the algorithm and arithmetic error can be neglected.
"""

# ╔═╡ e826fee5-8fe2-4d77-a94f-24ff976a3e1f
md"""
**(c)** We now generalise the potential to 
```math
v^\text{extended chain}(x) = v^\text{atom}(x) + \sum_{i=1}^\widetilde{M} v^\text{atom}(x - 2i) + v^\text{atom}(x + 2i),
```
i.e. a chain consisting of $2\widetilde{M} + 1$ atoms, or in code:
"""

# ╔═╡ 27853643-8358-4d84-a8bd-efc3f415e540
function v_extended_chain(Mtilde::Integer)
	function evaluate(x)
		accu = v_atom(x)
		for i in 1:Mtilde
			accu += v_atom(x - 2i) + v_atom(x + 2i)
		end
		accu
	end
end

# ╔═╡ b15e519a-cb5f-4bb7-b105-3b8ae704e489
let
	plot( v_extended_chain(1), xlims=(-7, 7), label="Mtilde = 1")
	plot!(v_extended_chain(2), label="Mtilde = 2")
end

# ╔═╡ acbddbfc-ba95-4f2c-a611-9a785ee5978d
md"""
Assume that $a$ needs to be chosen such that the same amount of empty space between the rightmost / leftmost atom and the domain boundary is required as in Task 8 (a). Similarly assume that the same grid spacing $h = \frac{2a}{N_b - 1}$ as in Task 8 (a) is sufficient for convergence to $3$ digits in $Δε$.

Within this setup investigate the limit $\widetilde{M} \to \infty$ numerically. Does the tunneling energy converge? Justify your argument from a physical perspective. If it does converge, determine the value to $2$ digits, if not determine the kind of divergence (e.g. rough dependency on $\widetilde{M}$ determined from a plot.).

The numerical scheme to achieve this needs a little care as solving the discretised QM problem numerically gets more and more challenging when $\widetilde{M}$ increases. In a naive approach your tunnelling energy might oscillate artifically. You can remedy this by not starting from a random initial guess, but by starting from the solution you obtained at $\widetilde{M} - 1$. Sometimes adding in a little random noise (e.g. `randn` but scaled by a small constant) can be helpful (Why ?). Describe and justify your developed numerical scheme in a few sentences.

*Extra hint:* How many times do you need to solve (CL) ? 
"""

# ╔═╡ 39a08d03-9d18-4346-a93c-86adb85811a1
md"""
### Task 9: Group atmosphere and distribution of work

Each team member individually should provide 4-5 sentences on his role in the project and the overall experience of working on the project as a group. We will open a separate task on moodle for you to return this feedback there, if you prefer.

Some questions you should address:
- Which tasks and subtasks (*(a)*, *(b)*, etc.) of the project did you mostly work on ?
- How did you decide within the group to distribute the workload as such ?
- In your opinion did each group member contribute equally to the project ?
- Where could your specific expertise and background from your prior studies contribute most to the project and the exercises we did earlier in the semester?
- Can you pinpoint aspects about your team members' study subject, which are relevant to the course (either the exercises or this project), which you learned from them in your discussions ?
"""

# ╔═╡ 00000000-0000-0000-0000-000000000001
PLUTO_PROJECT_TOML_CONTENTS = """
[deps]
BenchmarkTools = "6e4b80f9-dd63-53aa-95a3-0cdb28fa8baf"
DFTK = "acf6eb54-70d9-11e9-0013-234b7a5f5337"
DoubleFloats = "497a8b3b-efae-58df-a0af-a86822472b78"
GenericLinearAlgebra = "14197337-ba66-59df-a3e3-ca00e7dcff7a"
IntervalArithmetic = "d1acc4aa-44c8-5952-acd4-ba5d80a2a253"
LinearAlgebra = "37e2e46d-f89d-539d-b4ee-838fcccc9c8e"
LinearMaps = "7a12625a-238d-50fd-b39a-03d52299707e"
MatrixDepot = "b51810bb-c9f3-55da-ae3c-350fc1fbce05"
Plots = "91a5bcdd-55d7-5caf-9e0b-520d859cae80"
PlutoTeachingTools = "661c6b06-c737-4d37-b85c-46df65de6f69"
PlutoUI = "7f904dfe-b85e-4ff6-b463-dae2292396a8"
Printf = "de0858da-6303-5e67-8744-51eddeeeb8d7"
TimerOutputs = "a759f4b9-e2f1-59dc-863e-4aeb61b1ea8f"

[compat]
BenchmarkTools = "~1.3.2"
DFTK = "~0.6.11"
DoubleFloats = "~1.2.5"
GenericLinearAlgebra = "~0.3.11"
IntervalArithmetic = "~0.21.1"
LinearMaps = "~3.11.1"
MatrixDepot = "~1.0.10"
Plots = "~1.39.0"
PlutoTeachingTools = "~0.2.13"
PlutoUI = "~0.7.52"
TimerOutputs = "~0.5.23"
"""

# ╔═╡ 00000000-0000-0000-0000-000000000002
PLUTO_MANIFEST_TOML_CONTENTS = """
# This file is machine-generated - editing it directly is not advised

julia_version = "1.9.3"
manifest_format = "2.0"
project_hash = "da274f322cc681deea7d26a8de1faedc4be11509"

[[deps.AbstractFFTs]]
deps = ["LinearAlgebra"]
git-tree-sha1 = "d92ad398961a3ed262d8bf04a1a2b8340f915fef"
uuid = "621f4979-c628-5d54-868e-fcf4e3e8185c"
version = "1.5.0"
weakdeps = ["ChainRulesCore", "Test"]

    [deps.AbstractFFTs.extensions]
    AbstractFFTsChainRulesCoreExt = "ChainRulesCore"
    AbstractFFTsTestExt = "Test"

[[deps.AbstractPlutoDingetjes]]
deps = ["Pkg"]
git-tree-sha1 = "91bd53c39b9cbfb5ef4b015e8b582d344532bd0a"
uuid = "6e696c72-6542-2067-7265-42206c756150"
version = "1.2.0"

[[deps.Adapt]]
deps = ["LinearAlgebra", "Requires"]
git-tree-sha1 = "76289dc51920fdc6e0013c872ba9551d54961c24"
uuid = "79e6a3ab-5dfb-504d-930d-738a2a938a0e"
version = "3.6.2"
weakdeps = ["StaticArrays"]

    [deps.Adapt.extensions]
    AdaptStaticArraysExt = "StaticArrays"

[[deps.ArgTools]]
uuid = "0dad84c5-d112-42e6-8d28-ef12dabb789f"
version = "1.1.1"

[[deps.ArrayInterface]]
deps = ["Adapt", "LinearAlgebra", "Requires", "SparseArrays", "SuiteSparse"]
git-tree-sha1 = "f83ec24f76d4c8f525099b2ac475fc098138ec31"
uuid = "4fba245c-0d91-5ea0-9b3e-6abc04ee57a9"
version = "7.4.11"

    [deps.ArrayInterface.extensions]
    ArrayInterfaceBandedMatricesExt = "BandedMatrices"
    ArrayInterfaceBlockBandedMatricesExt = "BlockBandedMatrices"
    ArrayInterfaceCUDAExt = "CUDA"
    ArrayInterfaceGPUArraysCoreExt = "GPUArraysCore"
    ArrayInterfaceStaticArraysCoreExt = "StaticArraysCore"
    ArrayInterfaceTrackerExt = "Tracker"

    [deps.ArrayInterface.weakdeps]
    BandedMatrices = "aae01518-5342-5314-be14-df237901396f"
    BlockBandedMatrices = "ffab5731-97b5-5995-9138-79e8c1846df0"
    CUDA = "052768ef-5323-5732-b1bb-66c8b64840ba"
    GPUArraysCore = "46192b85-c4d5-4398-a991-12ede77f4527"
    StaticArraysCore = "1e83bf80-4336-4d27-bf5d-d5a4f845583c"
    Tracker = "9f7883ad-71c0-57eb-9f7f-b5c9e6d3789c"

[[deps.Artifacts]]
uuid = "56f22d72-fd6d-98f1-02f0-08ddc0907c33"

[[deps.AtomsBase]]
deps = ["LinearAlgebra", "PeriodicTable", "Printf", "Requires", "StaticArrays", "Unitful", "UnitfulAtomic"]
git-tree-sha1 = "995c2b6b17840cd87b722ce9c6cdd72f47bab545"
uuid = "a963bdd2-2df7-4f54-a1ee-49d51e6be12a"
version = "0.3.5"

[[deps.AxisAlgorithms]]
deps = ["LinearAlgebra", "Random", "SparseArrays", "WoodburyMatrices"]
git-tree-sha1 = "66771c8d21c8ff5e3a93379480a2307ac36863f7"
uuid = "13072b0f-2c55-5437-9ae7-d433b7a33950"
version = "1.0.1"

[[deps.Base64]]
uuid = "2a0f44e3-6c83-55bd-87e4-b1978d98bd5f"

[[deps.BenchmarkTools]]
deps = ["JSON", "Logging", "Printf", "Profile", "Statistics", "UUIDs"]
git-tree-sha1 = "d9a9701b899b30332bbcb3e1679c41cce81fb0e8"
uuid = "6e4b80f9-dd63-53aa-95a3-0cdb28fa8baf"
version = "1.3.2"

[[deps.BitFlags]]
git-tree-sha1 = "43b1a4a8f797c1cddadf60499a8a077d4af2cd2d"
uuid = "d1d4a3ce-64b1-5f1a-9ba4-7e7e69966f35"
version = "0.1.7"

[[deps.Bravais]]
deps = ["LinearAlgebra", "StaticArrays"]
git-tree-sha1 = "08c0613c61dcdd5dd148982cf91b107654e2e811"
uuid = "ada6cbde-b013-4edf-aa94-f6abe8bd6e6b"
version = "0.1.8"

[[deps.Brillouin]]
deps = ["Bravais", "DirectQhull", "DocStringExtensions", "LinearAlgebra", "Reexport", "Requires", "StaticArrays"]
git-tree-sha1 = "d349be305aa8b86593f611409211931a508aeb1f"
uuid = "23470ee3-d0df-4052-8b1a-8cbd6363e7f0"
version = "0.5.11"

[[deps.BufferedStreams]]
git-tree-sha1 = "4ae47f9a4b1dc19897d3743ff13685925c5202ec"
uuid = "e1450e63-4bb3-523b-b2a4-4ffa8c0fd77d"
version = "1.2.1"

[[deps.Bzip2_jll]]
deps = ["Artifacts", "JLLWrappers", "Libdl", "Pkg"]
git-tree-sha1 = "19a35467a82e236ff51bc17a3a44b69ef35185a2"
uuid = "6e34b625-4abd-537c-b88f-471c36dfa7a0"
version = "1.0.8+0"

[[deps.CRlibm]]
deps = ["CRlibm_jll"]
git-tree-sha1 = "32abd86e3c2025db5172aa182b982debed519834"
uuid = "96374032-68de-5a5b-8d9e-752f78720389"
version = "1.0.1"

[[deps.CRlibm_jll]]
deps = ["Artifacts", "JLLWrappers", "Libdl", "Pkg"]
git-tree-sha1 = "e329286945d0cfc04456972ea732551869af1cfc"
uuid = "4e9b3aee-d8a1-5a3d-ad8b-7d824db253f0"
version = "1.0.1+0"

[[deps.CUDA_Driver_jll]]
deps = ["Artifacts", "JLLWrappers", "LazyArtifacts", "Libdl", "Pkg"]
git-tree-sha1 = "35a37bb72b35964f2895c12c687ae263b4ac170c"
uuid = "4ee394cb-3365-5eb0-8335-949819d2adfc"
version = "0.6.0+3"

[[deps.CUDA_Runtime_jll]]
deps = ["Artifacts", "CUDA_Driver_jll", "JLLWrappers", "LazyArtifacts", "Libdl", "TOML"]
git-tree-sha1 = "bfe5a693a11522d58392f742243f2b50dc27afd6"
uuid = "76a88914-d11a-5bdc-97e0-2f5a05c973a2"
version = "0.9.2+0"

[[deps.Cairo_jll]]
deps = ["Artifacts", "Bzip2_jll", "CompilerSupportLibraries_jll", "Fontconfig_jll", "FreeType2_jll", "Glib_jll", "JLLWrappers", "LZO_jll", "Libdl", "Pixman_jll", "Pkg", "Xorg_libXext_jll", "Xorg_libXrender_jll", "Zlib_jll", "libpng_jll"]
git-tree-sha1 = "4b859a208b2397a7a623a03449e4636bdb17bcf2"
uuid = "83423d85-b0ee-5818-9007-b63ccbeb887a"
version = "1.16.1+1"

[[deps.ChainRulesCore]]
deps = ["Compat", "LinearAlgebra", "SparseArrays"]
git-tree-sha1 = "e30f2f4e20f7f186dc36529910beaedc60cfa644"
uuid = "d360d2e6-b24c-11e9-a2a3-2a2ae2dbcce4"
version = "1.16.0"

[[deps.ChannelBuffers]]
deps = ["CodecZlib", "Downloads", "Serialization", "Tar", "TranscodingStreams"]
git-tree-sha1 = "c522f957325aab2c5457328d711b7dfef3603cb1"
uuid = "79a69506-cdd1-4876-b8e5-7af85e53af4f"
version = "0.3.1"

[[deps.CodeTracking]]
deps = ["InteractiveUtils", "UUIDs"]
git-tree-sha1 = "a1296f0fe01a4c3f9bf0dc2934efbf4416f5db31"
uuid = "da1fd8a2-8d9e-5ec2-8556-3022fb5608a2"
version = "1.3.4"

[[deps.CodecZlib]]
deps = ["TranscodingStreams", "Zlib_jll"]
git-tree-sha1 = "02aa26a4cf76381be7f66e020a3eddeb27b0a092"
uuid = "944b1d66-785c-5afd-91f1-9de20f533193"
version = "0.7.2"

[[deps.ColorSchemes]]
deps = ["ColorTypes", "ColorVectorSpace", "Colors", "FixedPointNumbers", "PrecompileTools", "Random"]
git-tree-sha1 = "67c1f244b991cad9b0aa4b7540fb758c2488b129"
uuid = "35d6a980-a343-548e-a6ea-1d62b119f2f4"
version = "3.24.0"

[[deps.ColorTypes]]
deps = ["FixedPointNumbers", "Random"]
git-tree-sha1 = "eb7f0f8307f71fac7c606984ea5fb2817275d6e4"
uuid = "3da002f7-5984-5a60-b8a6-cbb66c0b333f"
version = "0.11.4"

[[deps.ColorVectorSpace]]
deps = ["ColorTypes", "FixedPointNumbers", "LinearAlgebra", "Requires", "Statistics", "TensorCore"]
git-tree-sha1 = "a1f44953f2382ebb937d60dafbe2deea4bd23249"
uuid = "c3611d14-8923-5661-9e6a-0046d554d3a4"
version = "0.10.0"
weakdeps = ["SpecialFunctions"]

    [deps.ColorVectorSpace.extensions]
    SpecialFunctionsExt = "SpecialFunctions"

[[deps.Colors]]
deps = ["ColorTypes", "FixedPointNumbers", "Reexport"]
git-tree-sha1 = "fc08e5930ee9a4e03f84bfb5211cb54e7769758a"
uuid = "5ae59095-9a9b-59fe-a467-6f913c188581"
version = "0.12.10"

[[deps.CommonSolve]]
git-tree-sha1 = "0eee5eb66b1cf62cd6ad1b460238e60e4b09400c"
uuid = "38540f10-b2f7-11e9-35d8-d573e4eb0ff2"
version = "0.2.4"

[[deps.CommonSubexpressions]]
deps = ["MacroTools", "Test"]
git-tree-sha1 = "7b8a93dba8af7e3b42fecabf646260105ac373f7"
uuid = "bbf7d656-a473-5ed7-a52c-81e309532950"
version = "0.3.0"

[[deps.Compat]]
deps = ["UUIDs"]
git-tree-sha1 = "8a62af3e248a8c4bad6b32cbbe663ae02275e32c"
uuid = "34da2185-b29b-5c13-b0c7-acf172513d20"
version = "4.10.0"
weakdeps = ["Dates", "LinearAlgebra"]

    [deps.Compat.extensions]
    CompatLinearAlgebraExt = "LinearAlgebra"

[[deps.CompilerSupportLibraries_jll]]
deps = ["Artifacts", "Libdl"]
uuid = "e66e0078-7015-5450-92f7-15fbd957f2ae"
version = "1.0.5+0"

[[deps.ComponentArrays]]
deps = ["ArrayInterface", "ChainRulesCore", "ForwardDiff", "Functors", "LinearAlgebra", "Requires", "StaticArrayInterface"]
git-tree-sha1 = "00380a5de40736c634b867069347b721ca311673"
uuid = "b0b7db55-cfe3-40fc-9ded-d10e2dbeff66"
version = "0.13.15"

    [deps.ComponentArrays.extensions]
    ComponentArraysConstructionBaseExt = "ConstructionBase"
    ComponentArraysGPUArraysExt = "GPUArrays"
    ComponentArraysRecursiveArrayToolsExt = "RecursiveArrayTools"
    ComponentArraysReverseDiffExt = "ReverseDiff"
    ComponentArraysSciMLBaseExt = "SciMLBase"
    ComponentArraysStaticArraysExt = "StaticArrays"

    [deps.ComponentArrays.weakdeps]
    ConstructionBase = "187b0558-2788-49d3-abe0-74a17ed4e7c9"
    GPUArrays = "0c68f7d7-f131-5f86-a1c3-88cf8149b2d7"
    RecursiveArrayTools = "731186ca-8d62-57ce-b412-fbd966d074cd"
    ReverseDiff = "37e2e3b7-166d-5795-8a7a-e32c996b4267"
    SciMLBase = "0bca4576-84f4-4d90-8ffe-ffa030f20462"
    StaticArrays = "90137ffa-7385-5640-81b9-e52037218182"

[[deps.ConcurrentUtilities]]
deps = ["Serialization", "Sockets"]
git-tree-sha1 = "5372dbbf8f0bdb8c700db5367132925c0771ef7e"
uuid = "f0e56b4a-5159-44fe-b623-3e5288b988bb"
version = "2.2.1"

[[deps.ConstructionBase]]
deps = ["LinearAlgebra"]
git-tree-sha1 = "c53fc348ca4d40d7b371e71fd52251839080cbc9"
uuid = "187b0558-2788-49d3-abe0-74a17ed4e7c9"
version = "1.5.4"

    [deps.ConstructionBase.extensions]
    ConstructionBaseIntervalSetsExt = "IntervalSets"
    ConstructionBaseStaticArraysExt = "StaticArrays"

    [deps.ConstructionBase.weakdeps]
    IntervalSets = "8197267c-284f-5f27-9208-e0e47529a953"
    StaticArrays = "90137ffa-7385-5640-81b9-e52037218182"

[[deps.Contour]]
git-tree-sha1 = "d05d9e7b7aedff4e5b51a029dced05cfb6125781"
uuid = "d38c429a-6771-53c6-b99e-75d170b6e991"
version = "0.6.2"

[[deps.Crayons]]
git-tree-sha1 = "249fe38abf76d48563e2f4556bebd215aa317e15"
uuid = "a8cc5b0e-0ffa-5ad4-8c14-923d3ee1735f"
version = "4.1.1"

[[deps.DFTK]]
deps = ["AbstractFFTs", "Artifacts", "AtomsBase", "Brillouin", "ChainRulesCore", "Dates", "DftFunctionals", "FFTW", "ForwardDiff", "GPUArraysCore", "InteratomicPotentials", "Interpolations", "IterTools", "IterativeSolvers", "LazyArtifacts", "Libxc", "LineSearches", "LinearAlgebra", "LinearMaps", "MPI", "Markdown", "Optim", "OrderedCollections", "PeriodicTable", "PkgVersion", "Polynomials", "PrecompileTools", "Preferences", "Primes", "Printf", "ProgressMeter", "PseudoPotentialIO", "Random", "Requires", "Roots", "SparseArrays", "SpecialFunctions", "Spglib", "StaticArrays", "Statistics", "TimerOutputs", "Unitful", "UnitfulAtomic", "spglib_jll"]
git-tree-sha1 = "135f4f4d8fd9f29ec1c9d67dd009c98eef53621e"
uuid = "acf6eb54-70d9-11e9-0013-234b7a5f5337"
version = "0.6.11"

[[deps.DataAPI]]
git-tree-sha1 = "8da84edb865b0b5b0100c0666a9bc9a0b71c553c"
uuid = "9a962f9c-6df0-11e9-0e5d-c546b8b5ee8a"
version = "1.15.0"

[[deps.DataFrames]]
deps = ["Compat", "DataAPI", "DataStructures", "Future", "InlineStrings", "InvertedIndices", "IteratorInterfaceExtensions", "LinearAlgebra", "Markdown", "Missings", "PooledArrays", "PrecompileTools", "PrettyTables", "Printf", "REPL", "Random", "Reexport", "SentinelArrays", "SortingAlgorithms", "Statistics", "TableTraits", "Tables", "Unicode"]
git-tree-sha1 = "04c738083f29f86e62c8afc341f0967d8717bdb8"
uuid = "a93c6f00-e57d-5684-b7b6-d8193f3e46c0"
version = "1.6.1"

[[deps.DataStructures]]
deps = ["Compat", "InteractiveUtils", "OrderedCollections"]
git-tree-sha1 = "3dbd312d370723b6bb43ba9d02fc36abade4518d"
uuid = "864edb3b-99cc-5e75-8d2d-829cb0a9cfe8"
version = "0.18.15"

[[deps.DataValueInterfaces]]
git-tree-sha1 = "bfc1187b79289637fa0ef6d4436ebdfe6905cbd6"
uuid = "e2d170a0-9d28-54be-80f0-106bbe20a464"
version = "1.0.0"

[[deps.Dates]]
deps = ["Printf"]
uuid = "ade2ca70-3891-5945-98fb-dc099432e06a"

[[deps.DelimitedFiles]]
deps = ["Mmap"]
git-tree-sha1 = "9e2f36d3c96a820c678f2f1f1782582fcf685bae"
uuid = "8bb1440f-4735-579b-a4ab-409b98df4dab"
version = "1.9.1"

[[deps.DftFunctionals]]
deps = ["ComponentArrays", "DiffResults", "ForwardDiff"]
git-tree-sha1 = "171252445375f15afb382fe58ce29a54b3216bf1"
uuid = "6bd331d2-b28d-4fd3-880e-1a1c7f37947f"
version = "0.2.3"

[[deps.DiffResults]]
deps = ["StaticArraysCore"]
git-tree-sha1 = "782dd5f4561f5d267313f23853baaaa4c52ea621"
uuid = "163ba53b-c6d8-5494-b064-1a9d43ac40c5"
version = "1.1.0"

[[deps.DiffRules]]
deps = ["IrrationalConstants", "LogExpFunctions", "NaNMath", "Random", "SpecialFunctions"]
git-tree-sha1 = "23163d55f885173722d1e4cf0f6110cdbaf7e272"
uuid = "b552c78f-8df3-52c6-915a-8e097449b14b"
version = "1.15.1"

[[deps.DirectQhull]]
deps = ["Qhull_jll"]
git-tree-sha1 = "5a941ad556ad4d2e310828b0f0b462678887ec2e"
uuid = "c3f9d41a-afcb-471e-bc58-0b8d83bd86f4"
version = "0.2.0"

[[deps.Distances]]
deps = ["LinearAlgebra", "Statistics", "StatsAPI"]
git-tree-sha1 = "b6def76ffad15143924a2199f72a5cd883a2e8a9"
uuid = "b4f34e82-e78d-54a5-968a-f98e89d6e8f7"
version = "0.10.9"
weakdeps = ["SparseArrays"]

    [deps.Distances.extensions]
    DistancesSparseArraysExt = "SparseArrays"

[[deps.Distributed]]
deps = ["Random", "Serialization", "Sockets"]
uuid = "8ba89e20-285c-5b6f-9357-94700520ee1b"

[[deps.DocStringExtensions]]
deps = ["LibGit2"]
git-tree-sha1 = "2fb1e02f2b635d0845df5d7c167fec4dd739b00d"
uuid = "ffbed154-4ef7-542d-bbb7-c09d3a79fcae"
version = "0.9.3"

[[deps.DoubleFloats]]
deps = ["GenericLinearAlgebra", "LinearAlgebra", "Polynomials", "Printf", "Quadmath", "Random", "Requires", "SpecialFunctions"]
git-tree-sha1 = "8e67c40c908c147d371ee4b38ce653c85a2048b9"
uuid = "497a8b3b-efae-58df-a0af-a86822472b78"
version = "1.2.5"

[[deps.Downloads]]
deps = ["ArgTools", "FileWatching", "LibCURL", "NetworkOptions"]
uuid = "f43a241f-c20a-4ad4-852c-f6b1247861c6"
version = "1.6.0"

[[deps.EnumX]]
git-tree-sha1 = "bdb1942cd4c45e3c678fd11569d5cccd80976237"
uuid = "4e289a0a-7415-4d19-859d-a7e5c4648b56"
version = "1.0.4"

[[deps.EpollShim_jll]]
deps = ["Artifacts", "JLLWrappers", "Libdl"]
git-tree-sha1 = "8e9441ee83492030ace98f9789a654a6d0b1f643"
uuid = "2702e6a9-849d-5ed8-8c21-79e8b8f9ee43"
version = "0.0.20230411+0"

[[deps.ErrorfreeArithmetic]]
git-tree-sha1 = "d6863c556f1142a061532e79f611aa46be201686"
uuid = "90fa49ef-747e-5e6f-a989-263ba693cf1a"
version = "0.5.2"

[[deps.ExceptionUnwrapping]]
deps = ["Test"]
git-tree-sha1 = "e90caa41f5a86296e014e148ee061bd6c3edec96"
uuid = "460bff9d-24e4-43bc-9d9f-a8973cb893f4"
version = "0.1.9"

[[deps.Expat_jll]]
deps = ["Artifacts", "JLLWrappers", "Libdl"]
git-tree-sha1 = "4558ab818dcceaab612d1bb8c19cee87eda2b83c"
uuid = "2e619515-83b5-522b-bb60-26c02a35a201"
version = "2.5.0+0"

[[deps.ExprTools]]
git-tree-sha1 = "27415f162e6028e81c72b82ef756bf321213b6ec"
uuid = "e2ba6199-217a-4e67-a87a-7c52f15ade04"
version = "0.1.10"

[[deps.EzXML]]
deps = ["Printf", "XML2_jll"]
git-tree-sha1 = "0fa3b52a04a4e210aeb1626def9c90df3ae65268"
uuid = "8f5d6c58-4d21-5cfd-889c-e3ad7ee6a615"
version = "1.1.0"

[[deps.FFMPEG]]
deps = ["FFMPEG_jll"]
git-tree-sha1 = "b57e3acbe22f8484b4b5ff66a7499717fe1a9cc8"
uuid = "c87230d0-a227-11e9-1b43-d7ebe4e7570a"
version = "0.4.1"

[[deps.FFMPEG_jll]]
deps = ["Artifacts", "Bzip2_jll", "FreeType2_jll", "FriBidi_jll", "JLLWrappers", "LAME_jll", "Libdl", "Ogg_jll", "OpenSSL_jll", "Opus_jll", "PCRE2_jll", "Pkg", "Zlib_jll", "libaom_jll", "libass_jll", "libfdk_aac_jll", "libvorbis_jll", "x264_jll", "x265_jll"]
git-tree-sha1 = "74faea50c1d007c85837327f6775bea60b5492dd"
uuid = "b22a6f82-2f65-5046-a5b2-351ab43fb4e5"
version = "4.4.2+2"

[[deps.FFTW]]
deps = ["AbstractFFTs", "FFTW_jll", "LinearAlgebra", "MKL_jll", "Preferences", "Reexport"]
git-tree-sha1 = "b4fbdd20c889804969571cc589900803edda16b7"
uuid = "7a1cc6ca-52ef-59f5-83cd-3a7055c09341"
version = "1.7.1"

[[deps.FFTW_jll]]
deps = ["Artifacts", "JLLWrappers", "Libdl", "Pkg"]
git-tree-sha1 = "c6033cc3892d0ef5bb9cd29b7f2f0331ea5184ea"
uuid = "f5851436-0d7a-5f13-b9de-f02708fd171a"
version = "3.3.10+0"

[[deps.FastRounding]]
deps = ["ErrorfreeArithmetic", "LinearAlgebra"]
git-tree-sha1 = "6344aa18f654196be82e62816935225b3b9abe44"
uuid = "fa42c844-2597-5d31-933b-ebd51ab2693f"
version = "0.3.1"

[[deps.FileWatching]]
uuid = "7b1f6079-737a-58dc-b8bc-7a2ca5c1b5ee"

[[deps.FillArrays]]
deps = ["LinearAlgebra", "Random"]
git-tree-sha1 = "a20eaa3ad64254c61eeb5f230d9306e937405434"
uuid = "1a297f60-69ca-5386-bcde-b61e274b549b"
version = "1.6.1"
weakdeps = ["SparseArrays", "Statistics"]

    [deps.FillArrays.extensions]
    FillArraysSparseArraysExt = "SparseArrays"
    FillArraysStatisticsExt = "Statistics"

[[deps.FiniteDiff]]
deps = ["ArrayInterface", "LinearAlgebra", "Requires", "Setfield", "SparseArrays"]
git-tree-sha1 = "c6e4a1fbe73b31a3dea94b1da449503b8830c306"
uuid = "6a86dc24-6348-571c-b903-95158fe2bd41"
version = "2.21.1"

    [deps.FiniteDiff.extensions]
    FiniteDiffBandedMatricesExt = "BandedMatrices"
    FiniteDiffBlockBandedMatricesExt = "BlockBandedMatrices"
    FiniteDiffStaticArraysExt = "StaticArrays"

    [deps.FiniteDiff.weakdeps]
    BandedMatrices = "aae01518-5342-5314-be14-df237901396f"
    BlockBandedMatrices = "ffab5731-97b5-5995-9138-79e8c1846df0"
    StaticArrays = "90137ffa-7385-5640-81b9-e52037218182"

[[deps.FixedPointNumbers]]
deps = ["Statistics"]
git-tree-sha1 = "335bfdceacc84c5cdf16aadc768aa5ddfc5383cc"
uuid = "53c48c17-4a7d-5ca2-90c5-79b7896eea93"
version = "0.8.4"

[[deps.Fontconfig_jll]]
deps = ["Artifacts", "Bzip2_jll", "Expat_jll", "FreeType2_jll", "JLLWrappers", "Libdl", "Libuuid_jll", "Pkg", "Zlib_jll"]
git-tree-sha1 = "21efd19106a55620a188615da6d3d06cd7f6ee03"
uuid = "a3f928ae-7b40-5064-980b-68af3947d34b"
version = "2.13.93+0"

[[deps.Formatting]]
deps = ["Printf"]
git-tree-sha1 = "8339d61043228fdd3eb658d86c926cb282ae72a8"
uuid = "59287772-0a20-5a39-b81b-1366585eb4c0"
version = "0.4.2"

[[deps.ForwardDiff]]
deps = ["CommonSubexpressions", "DiffResults", "DiffRules", "LinearAlgebra", "LogExpFunctions", "NaNMath", "Preferences", "Printf", "Random", "SpecialFunctions"]
git-tree-sha1 = "cf0fe81336da9fb90944683b8c41984b08793dad"
uuid = "f6369f11-7733-5829-9624-2563aa707210"
version = "0.10.36"
weakdeps = ["StaticArrays"]

    [deps.ForwardDiff.extensions]
    ForwardDiffStaticArraysExt = "StaticArrays"

[[deps.FreeType2_jll]]
deps = ["Artifacts", "Bzip2_jll", "JLLWrappers", "Libdl", "Zlib_jll"]
git-tree-sha1 = "d8db6a5a2fe1381c1ea4ef2cab7c69c2de7f9ea0"
uuid = "d7e528f0-a631-5988-bf34-fe36492bcfd7"
version = "2.13.1+0"

[[deps.FriBidi_jll]]
deps = ["Artifacts", "JLLWrappers", "Libdl", "Pkg"]
git-tree-sha1 = "aa31987c2ba8704e23c6c8ba8a4f769d5d7e4f91"
uuid = "559328eb-81f9-559d-9380-de523a88c83c"
version = "1.0.10+0"

[[deps.Functors]]
deps = ["LinearAlgebra"]
git-tree-sha1 = "9a68d75d466ccc1218d0552a8e1631151c569545"
uuid = "d9f16b24-f501-4c13-a1f2-28368ffc5196"
version = "0.4.5"

[[deps.Future]]
deps = ["Random"]
uuid = "9fa8497b-333b-5362-9e8d-4d0656e87820"

[[deps.GLFW_jll]]
deps = ["Artifacts", "JLLWrappers", "Libdl", "Libglvnd_jll", "Pkg", "Xorg_libXcursor_jll", "Xorg_libXi_jll", "Xorg_libXinerama_jll", "Xorg_libXrandr_jll"]
git-tree-sha1 = "d972031d28c8c8d9d7b41a536ad7bb0c2579caca"
uuid = "0656b61e-2033-5cc2-a64a-77c0f6c09b89"
version = "3.3.8+0"

[[deps.GPUArraysCore]]
deps = ["Adapt"]
git-tree-sha1 = "2d6ca471a6c7b536127afccfa7564b5b39227fe0"
uuid = "46192b85-c4d5-4398-a991-12ede77f4527"
version = "0.1.5"

[[deps.GR]]
deps = ["Artifacts", "Base64", "DelimitedFiles", "Downloads", "GR_jll", "HTTP", "JSON", "Libdl", "LinearAlgebra", "Pkg", "Preferences", "Printf", "Random", "Serialization", "Sockets", "TOML", "Tar", "Test", "UUIDs", "p7zip_jll"]
git-tree-sha1 = "27442171f28c952804dede8ff72828a96f2bfc1f"
uuid = "28b8d3ca-fb5f-59d9-8090-bfdbd6d07a71"
version = "0.72.10"

[[deps.GR_jll]]
deps = ["Artifacts", "Bzip2_jll", "Cairo_jll", "FFMPEG_jll", "Fontconfig_jll", "FreeType2_jll", "GLFW_jll", "JLLWrappers", "JpegTurbo_jll", "Libdl", "Libtiff_jll", "Pixman_jll", "Qt6Base_jll", "Zlib_jll", "libpng_jll"]
git-tree-sha1 = "025d171a2847f616becc0f84c8dc62fe18f0f6dd"
uuid = "d2c73de3-f751-5644-a686-071e5b155ba9"
version = "0.72.10+0"

[[deps.GenericLinearAlgebra]]
deps = ["LinearAlgebra", "Printf", "Random", "libblastrampoline_jll"]
git-tree-sha1 = "02be7066f936af6b04669f7c370a31af9036c440"
uuid = "14197337-ba66-59df-a3e3-ca00e7dcff7a"
version = "0.3.11"

[[deps.Gettext_jll]]
deps = ["Artifacts", "CompilerSupportLibraries_jll", "JLLWrappers", "Libdl", "Libiconv_jll", "Pkg", "XML2_jll"]
git-tree-sha1 = "9b02998aba7bf074d14de89f9d37ca24a1a0b046"
uuid = "78b55507-aeef-58d4-861c-77aaff3498b1"
version = "0.21.0+0"

[[deps.Glib_jll]]
deps = ["Artifacts", "Gettext_jll", "JLLWrappers", "Libdl", "Libffi_jll", "Libiconv_jll", "Libmount_jll", "PCRE2_jll", "Zlib_jll"]
git-tree-sha1 = "e94c92c7bf4819685eb80186d51c43e71d4afa17"
uuid = "7746bdde-850d-59dc-9ae8-88ece973131d"
version = "2.76.5+0"

[[deps.Graphite2_jll]]
deps = ["Artifacts", "JLLWrappers", "Libdl", "Pkg"]
git-tree-sha1 = "344bf40dcab1073aca04aa0df4fb092f920e4011"
uuid = "3b182d85-2403-5c21-9c21-1e1f0cc25472"
version = "1.3.14+0"

[[deps.Grisu]]
git-tree-sha1 = "53bb909d1151e57e2484c3d1b53e19552b887fb2"
uuid = "42e2da0e-8278-4e71-bc24-59509adca0fe"
version = "1.0.2"

[[deps.HDF5]]
deps = ["Compat", "HDF5_jll", "Libdl", "MPIPreferences", "Mmap", "Preferences", "Printf", "Random", "Requires", "UUIDs"]
git-tree-sha1 = "26407bd1c60129062cec9da63dc7d08251544d53"
uuid = "f67ccb44-e63f-5c2f-98bd-6dc0ccc4ba2f"
version = "0.17.1"
weakdeps = ["MPI"]

    [deps.HDF5.extensions]
    MPIExt = "MPI"

[[deps.HDF5_jll]]
deps = ["Artifacts", "JLLWrappers", "LibCURL_jll", "Libdl", "OpenSSL_jll", "Pkg", "Zlib_jll"]
git-tree-sha1 = "4cc2bb72df6ff40b055295fdef6d92955f9dede8"
uuid = "0234f1f7-429e-5d53-9886-15a909be8d59"
version = "1.12.2+2"

[[deps.HTTP]]
deps = ["Base64", "CodecZlib", "ConcurrentUtilities", "Dates", "ExceptionUnwrapping", "Logging", "LoggingExtras", "MbedTLS", "NetworkOptions", "OpenSSL", "Random", "SimpleBufferStream", "Sockets", "URIs", "UUIDs"]
git-tree-sha1 = "5eab648309e2e060198b45820af1a37182de3cce"
uuid = "cd3eb016-35fb-5094-929b-558a96fad6f3"
version = "1.10.0"

[[deps.HarfBuzz_jll]]
deps = ["Artifacts", "Cairo_jll", "Fontconfig_jll", "FreeType2_jll", "Glib_jll", "Graphite2_jll", "JLLWrappers", "Libdl", "Libffi_jll", "Pkg"]
git-tree-sha1 = "129acf094d168394e80ee1dc4bc06ec835e510a3"
uuid = "2e76f6c2-a576-52d4-95c1-20adfe4de566"
version = "2.8.1+1"

[[deps.Hyperscript]]
deps = ["Test"]
git-tree-sha1 = "8d511d5b81240fc8e6802386302675bdf47737b9"
uuid = "47d2ed2b-36de-50cf-bf87-49c2cf4b8b91"
version = "0.0.4"

[[deps.HypertextLiteral]]
deps = ["Tricks"]
git-tree-sha1 = "c47c5fa4c5308f27ccaac35504858d8914e102f9"
uuid = "ac1192a8-f4b3-4bfe-ba22-af5b92cd3ab2"
version = "0.9.4"

[[deps.IOCapture]]
deps = ["Logging", "Random"]
git-tree-sha1 = "d75853a0bdbfb1ac815478bacd89cd27b550ace6"
uuid = "b5f81e59-6552-4d32-b1f0-c071b021bf89"
version = "0.2.3"

[[deps.IfElse]]
git-tree-sha1 = "debdd00ffef04665ccbb3e150747a77560e8fad1"
uuid = "615f187c-cbe4-4ef1-ba3b-2fcf58d6d173"
version = "0.1.1"

[[deps.InlineStrings]]
deps = ["Parsers"]
git-tree-sha1 = "9cc2baf75c6d09f9da536ddf58eb2f29dedaf461"
uuid = "842dd82b-1e85-43dc-bf29-5d0ee9dffc48"
version = "1.4.0"

[[deps.IntegerMathUtils]]
git-tree-sha1 = "b8ffb903da9f7b8cf695a8bead8e01814aa24b30"
uuid = "18e54dd8-cb9d-406c-a71d-865a43cbb235"
version = "0.1.2"

[[deps.IntelOpenMP_jll]]
deps = ["Artifacts", "JLLWrappers", "Libdl", "Pkg"]
git-tree-sha1 = "ad37c091f7d7daf900963171600d7c1c5c3ede32"
uuid = "1d5cc7b8-4909-519e-a0f8-d0f5ad9712d0"
version = "2023.2.0+0"

[[deps.InteractiveUtils]]
deps = ["Markdown"]
uuid = "b77e0a4c-d291-57a0-90e8-8db25a27a240"

[[deps.InteratomicPotentials]]
deps = ["AtomsBase", "Distances", "LinearAlgebra", "NearestNeighbors", "StaticArrays", "Unitful", "UnitfulAtomic"]
git-tree-sha1 = "e52c1cff4fa468972621f0b5dd45ce2ee08dc730"
uuid = "a9efe35a-c65d-452d-b8a8-82646cd5cb04"
version = "0.2.6"

[[deps.Interpolations]]
deps = ["Adapt", "AxisAlgorithms", "ChainRulesCore", "LinearAlgebra", "OffsetArrays", "Random", "Ratios", "Requires", "SharedArrays", "SparseArrays", "StaticArrays", "WoodburyMatrices"]
git-tree-sha1 = "721ec2cf720536ad005cb38f50dbba7b02419a15"
uuid = "a98d9a8b-a2ab-59e6-89dd-64a1c18fca59"
version = "0.14.7"

[[deps.IntervalArithmetic]]
deps = ["CRlibm", "EnumX", "FastRounding", "LinearAlgebra", "Markdown", "Random", "RecipesBase", "RoundingEmulator", "SetRounding", "StaticArrays"]
git-tree-sha1 = "d70eb5999afad9c180b6aa7947260c1b66163f8a"
uuid = "d1acc4aa-44c8-5952-acd4-ba5d80a2a253"
version = "0.21.1"

[[deps.InvertedIndices]]
git-tree-sha1 = "0dc7b50b8d436461be01300fd8cd45aa0274b038"
uuid = "41ab1584-1d38-5bbf-9106-f11c6c58b48f"
version = "1.3.0"

[[deps.IrrationalConstants]]
git-tree-sha1 = "630b497eafcc20001bba38a4651b327dcfc491d2"
uuid = "92d709cd-6900-40b7-9082-c6be49f344b6"
version = "0.2.2"

[[deps.IterTools]]
git-tree-sha1 = "4ced6667f9974fc5c5943fa5e2ef1ca43ea9e450"
uuid = "c8e1da08-722c-5040-9ed9-7db0dc04731e"
version = "1.8.0"

[[deps.IterativeSolvers]]
deps = ["LinearAlgebra", "Printf", "Random", "RecipesBase", "SparseArrays"]
git-tree-sha1 = "1169632f425f79429f245113b775a0e3d121457c"
uuid = "42fd0dbc-a981-5370-80f2-aaf504508153"
version = "0.9.2"

[[deps.IteratorInterfaceExtensions]]
git-tree-sha1 = "a3f24677c21f5bbe9d2a714f95dcd58337fb2856"
uuid = "82899510-4779-5014-852e-03e436cf321d"
version = "1.0.0"

[[deps.JLFzf]]
deps = ["Pipe", "REPL", "Random", "fzf_jll"]
git-tree-sha1 = "f377670cda23b6b7c1c0b3893e37451c5c1a2185"
uuid = "1019f520-868f-41f5-a6de-eb00f4b6a39c"
version = "0.1.5"

[[deps.JLLWrappers]]
deps = ["Artifacts", "Preferences"]
git-tree-sha1 = "7e5d6779a1e09a36db2a7b6cff50942a0a7d0fca"
uuid = "692b3bcd-3c85-4b1f-b108-f13ce0eb3210"
version = "1.5.0"

[[deps.JSON]]
deps = ["Dates", "Mmap", "Parsers", "Unicode"]
git-tree-sha1 = "31e996f0a15c7b280ba9f76636b3ff9e2ae58c9a"
uuid = "682c06a0-de6a-54ab-a142-c8b1cf79cde6"
version = "0.21.4"

[[deps.JpegTurbo_jll]]
deps = ["Artifacts", "JLLWrappers", "Libdl"]
git-tree-sha1 = "6f2675ef130a300a112286de91973805fcc5ffbc"
uuid = "aacddb02-875f-59d6-b918-886e6ef4fbf8"
version = "2.1.91+0"

[[deps.JuliaInterpreter]]
deps = ["CodeTracking", "InteractiveUtils", "Random", "UUIDs"]
git-tree-sha1 = "81dc6aefcbe7421bd62cb6ca0e700779330acff8"
uuid = "aa1ae85d-cabe-5617-a682-6adf51b2e16a"
version = "0.9.25"

[[deps.LAME_jll]]
deps = ["Artifacts", "JLLWrappers", "Libdl", "Pkg"]
git-tree-sha1 = "f6250b16881adf048549549fba48b1161acdac8c"
uuid = "c1c5ebd0-6772-5130-a774-d5fcae4a789d"
version = "3.100.1+0"

[[deps.LERC_jll]]
deps = ["Artifacts", "JLLWrappers", "Libdl", "Pkg"]
git-tree-sha1 = "bf36f528eec6634efc60d7ec062008f171071434"
uuid = "88015f11-f218-50d7-93a8-a6af411a945d"
version = "3.0.0+1"

[[deps.LLVMOpenMP_jll]]
deps = ["Artifacts", "JLLWrappers", "Libdl", "Pkg"]
git-tree-sha1 = "f689897ccbe049adb19a065c495e75f372ecd42b"
uuid = "1d63c593-3942-5779-bab2-d838dc0a180e"
version = "15.0.4+0"

[[deps.LZO_jll]]
deps = ["Artifacts", "JLLWrappers", "Libdl", "Pkg"]
git-tree-sha1 = "e5b909bcf985c5e2605737d2ce278ed791b89be6"
uuid = "dd4b983a-f0e5-5f8d-a1b7-129d4a5fb1ac"
version = "2.10.1+0"

[[deps.LaTeXStrings]]
git-tree-sha1 = "f2355693d6778a178ade15952b7ac47a4ff97996"
uuid = "b964fa9f-0449-5b57-a5c2-d3ea65f4040f"
version = "1.3.0"

[[deps.Latexify]]
deps = ["Formatting", "InteractiveUtils", "LaTeXStrings", "MacroTools", "Markdown", "OrderedCollections", "Printf", "Requires"]
git-tree-sha1 = "f428ae552340899a935973270b8d98e5a31c49fe"
uuid = "23fbe1c1-3f47-55db-b15f-69d7ec21a316"
version = "0.16.1"

    [deps.Latexify.extensions]
    DataFramesExt = "DataFrames"
    SymEngineExt = "SymEngine"

    [deps.Latexify.weakdeps]
    DataFrames = "a93c6f00-e57d-5684-b7b6-d8193f3e46c0"
    SymEngine = "123dc426-2d89-5057-bbad-38513e3affd8"

[[deps.LazyArtifacts]]
deps = ["Artifacts", "Pkg"]
uuid = "4af54fe1-eca0-43a8-85a7-787d91b784e3"

[[deps.LibCURL]]
deps = ["LibCURL_jll", "MozillaCACerts_jll"]
uuid = "b27032c2-a3e7-50c8-80cd-2d36dbcbfd21"
version = "0.6.3"

[[deps.LibCURL_jll]]
deps = ["Artifacts", "LibSSH2_jll", "Libdl", "MbedTLS_jll", "Zlib_jll", "nghttp2_jll"]
uuid = "deac9b47-8bc7-5906-a0fe-35ac56dc84c0"
version = "7.84.0+0"

[[deps.LibGit2]]
deps = ["Base64", "NetworkOptions", "Printf", "SHA"]
uuid = "76f85450-5226-5b5a-8eaa-529ad045b433"

[[deps.LibSSH2_jll]]
deps = ["Artifacts", "Libdl", "MbedTLS_jll"]
uuid = "29816b5a-b9ab-546f-933c-edad1886dfa8"
version = "1.10.2+0"

[[deps.Libdl]]
uuid = "8f399da3-3557-5675-b5ff-fb832c97cbdb"

[[deps.Libffi_jll]]
deps = ["Artifacts", "JLLWrappers", "Libdl", "Pkg"]
git-tree-sha1 = "0b4a5d71f3e5200a7dff793393e09dfc2d874290"
uuid = "e9f186c6-92d2-5b65-8a66-fee21dc1b490"
version = "3.2.2+1"

[[deps.Libgcrypt_jll]]
deps = ["Artifacts", "JLLWrappers", "Libdl", "Libgpg_error_jll", "Pkg"]
git-tree-sha1 = "64613c82a59c120435c067c2b809fc61cf5166ae"
uuid = "d4300ac3-e22c-5743-9152-c294e39db1e4"
version = "1.8.7+0"

[[deps.Libglvnd_jll]]
deps = ["Artifacts", "JLLWrappers", "Libdl", "Pkg", "Xorg_libX11_jll", "Xorg_libXext_jll"]
git-tree-sha1 = "6f73d1dd803986947b2c750138528a999a6c7733"
uuid = "7e76a0d4-f3c7-5321-8279-8d96eeed0f29"
version = "1.6.0+0"

[[deps.Libgpg_error_jll]]
deps = ["Artifacts", "JLLWrappers", "Libdl", "Pkg"]
git-tree-sha1 = "c333716e46366857753e273ce6a69ee0945a6db9"
uuid = "7add5ba3-2f88-524e-9cd5-f83b8a55f7b8"
version = "1.42.0+0"

[[deps.Libiconv_jll]]
deps = ["Artifacts", "JLLWrappers", "Libdl"]
git-tree-sha1 = "f9557a255370125b405568f9767d6d195822a175"
uuid = "94ce4f54-9a6c-5748-9c1c-f9c7231a4531"
version = "1.17.0+0"

[[deps.Libmount_jll]]
deps = ["Artifacts", "JLLWrappers", "Libdl", "Pkg"]
git-tree-sha1 = "9c30530bf0effd46e15e0fdcf2b8636e78cbbd73"
uuid = "4b2f31a3-9ecc-558c-b454-b3730dcb73e9"
version = "2.35.0+0"

[[deps.Libtiff_jll]]
deps = ["Artifacts", "JLLWrappers", "JpegTurbo_jll", "LERC_jll", "Libdl", "XZ_jll", "Zlib_jll", "Zstd_jll"]
git-tree-sha1 = "2da088d113af58221c52828a80378e16be7d037a"
uuid = "89763e89-9b03-5906-acba-b20f662cd828"
version = "4.5.1+1"

[[deps.Libuuid_jll]]
deps = ["Artifacts", "JLLWrappers", "Libdl", "Pkg"]
git-tree-sha1 = "7f3efec06033682db852f8b3bc3c1d2b0a0ab066"
uuid = "38a345b3-de98-5d2b-a5d3-14cd9215e700"
version = "2.36.0+0"

[[deps.Libxc]]
deps = ["Libxc_GPU_jll", "Libxc_jll", "Requires"]
git-tree-sha1 = "4c3c4e4c0917b3bcfa9bde78b7f1be011a827bac"
uuid = "66e17ffc-8502-11e9-23b5-c9248d0eb96d"
version = "0.3.15"

    [deps.Libxc.extensions]
    LibxcCudaExt = "CUDA"

    [deps.Libxc.weakdeps]
    CUDA = "052768ef-5323-5732-b1bb-66c8b64840ba"

[[deps.Libxc_GPU_jll]]
deps = ["Artifacts", "CUDA_Runtime_jll", "CompilerSupportLibraries_jll", "JLLWrappers", "LazyArtifacts", "Libdl", "Pkg", "TOML"]
git-tree-sha1 = "ee321f68686361802f2ddb978dae441a024e61ea"
uuid = "25af9330-9b41-55d4-a324-1a83c0a0a1ac"
version = "6.1.0+2"

[[deps.Libxc_jll]]
deps = ["Artifacts", "CompilerSupportLibraries_jll", "JLLWrappers", "Libdl", "Pkg"]
git-tree-sha1 = "c5516f2b1655a103225e69477e3df009347580df"
uuid = "a56a6d9d-ad03-58af-ab61-878bf78270d6"
version = "6.1.0+0"

[[deps.LineSearches]]
deps = ["LinearAlgebra", "NLSolversBase", "NaNMath", "Parameters", "Printf"]
git-tree-sha1 = "7bbea35cec17305fc70a0e5b4641477dc0789d9d"
uuid = "d3d80556-e9d4-5f37-9878-2ab0fcc64255"
version = "7.2.0"

[[deps.LinearAlgebra]]
deps = ["Libdl", "OpenBLAS_jll", "libblastrampoline_jll"]
uuid = "37e2e46d-f89d-539d-b4ee-838fcccc9c8e"

[[deps.LinearMaps]]
deps = ["LinearAlgebra"]
git-tree-sha1 = "9df2ab050ffefe870a09c7b6afdb0cde381703f2"
uuid = "7a12625a-238d-50fd-b39a-03d52299707e"
version = "3.11.1"
weakdeps = ["ChainRulesCore", "SparseArrays", "Statistics"]

    [deps.LinearMaps.extensions]
    LinearMapsChainRulesCoreExt = "ChainRulesCore"
    LinearMapsSparseArraysExt = "SparseArrays"
    LinearMapsStatisticsExt = "Statistics"

[[deps.LogExpFunctions]]
deps = ["DocStringExtensions", "IrrationalConstants", "LinearAlgebra"]
git-tree-sha1 = "7d6dd4e9212aebaeed356de34ccf262a3cd415aa"
uuid = "2ab3a3ac-af41-5b50-aa03-7779005ae688"
version = "0.3.26"

    [deps.LogExpFunctions.extensions]
    LogExpFunctionsChainRulesCoreExt = "ChainRulesCore"
    LogExpFunctionsChangesOfVariablesExt = "ChangesOfVariables"
    LogExpFunctionsInverseFunctionsExt = "InverseFunctions"

    [deps.LogExpFunctions.weakdeps]
    ChainRulesCore = "d360d2e6-b24c-11e9-a2a3-2a2ae2dbcce4"
    ChangesOfVariables = "9e997f8a-9a97-42d5-a9f1-ce6bfc15e2c0"
    InverseFunctions = "3587e190-3f89-42d0-90ee-14403ec27112"

[[deps.Logging]]
uuid = "56ddb016-857b-54e1-b83d-db4d58db5568"

[[deps.LoggingExtras]]
deps = ["Dates", "Logging"]
git-tree-sha1 = "0d097476b6c381ab7906460ef1ef1638fbce1d91"
uuid = "e6f89c97-d47a-5376-807f-9c37f3926c36"
version = "1.0.2"

[[deps.LoweredCodeUtils]]
deps = ["JuliaInterpreter"]
git-tree-sha1 = "60168780555f3e663c536500aa790b6368adc02a"
uuid = "6f1432cf-f94c-5a45-995e-cdbf5db27b0b"
version = "2.3.0"

[[deps.MAT]]
deps = ["BufferedStreams", "CodecZlib", "HDF5", "SparseArrays"]
git-tree-sha1 = "ed1cf0a322d78cee07718bed5fd945e2218c35a1"
uuid = "23992714-dd62-5051-b70f-ba57cb901cac"
version = "0.10.6"

[[deps.MIMEs]]
git-tree-sha1 = "65f28ad4b594aebe22157d6fac869786a255b7eb"
uuid = "6c6e2e6c-3030-632d-7369-2d6c69616d65"
version = "0.1.4"

[[deps.MKL_jll]]
deps = ["Artifacts", "IntelOpenMP_jll", "JLLWrappers", "LazyArtifacts", "Libdl", "Pkg"]
git-tree-sha1 = "eb006abbd7041c28e0d16260e50a24f8f9104913"
uuid = "856f044c-d86e-5d09-b602-aeab76dc8ba7"
version = "2023.2.0+0"

[[deps.MPI]]
deps = ["Distributed", "DocStringExtensions", "Libdl", "MPICH_jll", "MPIPreferences", "MPItrampoline_jll", "MicrosoftMPI_jll", "OpenMPI_jll", "PkgVersion", "PrecompileTools", "Requires", "Serialization", "Sockets"]
git-tree-sha1 = "b4d8707e42b693720b54f0b3434abee6dd4d947a"
uuid = "da04e1cc-30fd-572f-bb4f-1f8673147195"
version = "0.20.16"

    [deps.MPI.extensions]
    AMDGPUExt = "AMDGPU"
    CUDAExt = "CUDA"

    [deps.MPI.weakdeps]
    AMDGPU = "21141c5a-9bdb-4563-92ae-f87d6854732e"
    CUDA = "052768ef-5323-5732-b1bb-66c8b64840ba"

[[deps.MPICH_jll]]
deps = ["Artifacts", "CompilerSupportLibraries_jll", "JLLWrappers", "LazyArtifacts", "Libdl", "MPIPreferences", "TOML"]
git-tree-sha1 = "8a5b4d2220377d1ece13f49438d71ad20cf1ba83"
uuid = "7cb0a576-ebde-5e09-9194-50597f1243b4"
version = "4.1.2+0"

[[deps.MPIPreferences]]
deps = ["Libdl", "Preferences"]
git-tree-sha1 = "781916a2ebf2841467cda03b6f1af43e23839d85"
uuid = "3da0fdf6-3ccc-4f1b-acd9-58baa6c99267"
version = "0.1.9"

[[deps.MPItrampoline_jll]]
deps = ["Artifacts", "CompilerSupportLibraries_jll", "JLLWrappers", "LazyArtifacts", "Libdl", "MPIPreferences", "TOML"]
git-tree-sha1 = "6979eccb6a9edbbb62681e158443e79ecc0d056a"
uuid = "f1f71cc9-e9ae-5b93-9b94-4fe0e1ad3748"
version = "5.3.1+0"

[[deps.MacroTools]]
deps = ["Markdown", "Random"]
git-tree-sha1 = "9ee1618cbf5240e6d4e0371d6f24065083f60c48"
uuid = "1914dd2f-81c6-5fcd-8719-6d5c9610ff09"
version = "0.5.11"

[[deps.Markdown]]
deps = ["Base64"]
uuid = "d6f4376e-aef5-505a-96c1-9c027394607a"

[[deps.MatrixDepot]]
deps = ["ChannelBuffers", "DataFrames", "LinearAlgebra", "MAT", "Markdown", "Mmap", "Scratch", "Serialization", "SparseArrays"]
git-tree-sha1 = "fb9ab8df44551c1cc26cffcce0d6ab93a8f303b4"
uuid = "b51810bb-c9f3-55da-ae3c-350fc1fbce05"
version = "1.0.10"

[[deps.MbedTLS]]
deps = ["Dates", "MbedTLS_jll", "MozillaCACerts_jll", "Random", "Sockets"]
git-tree-sha1 = "03a9b9718f5682ecb107ac9f7308991db4ce395b"
uuid = "739be429-bea8-5141-9913-cc70e7f3736d"
version = "1.1.7"

[[deps.MbedTLS_jll]]
deps = ["Artifacts", "Libdl"]
uuid = "c8ffd9c3-330d-5841-b78e-0817d7145fa1"
version = "2.28.2+0"

[[deps.Measures]]
git-tree-sha1 = "c13304c81eec1ed3af7fc20e75fb6b26092a1102"
uuid = "442fdcdd-2543-5da2-b0f3-8c86c306513e"
version = "0.3.2"

[[deps.MicrosoftMPI_jll]]
deps = ["Artifacts", "JLLWrappers", "Libdl", "Pkg"]
git-tree-sha1 = "a7023883872e52bc29bcaac74f19adf39347d2d5"
uuid = "9237b28f-5490-5468-be7b-bb81f5f5e6cf"
version = "10.1.4+0"

[[deps.Missings]]
deps = ["DataAPI"]
git-tree-sha1 = "f66bdc5de519e8f8ae43bdc598782d35a25b1272"
uuid = "e1d29d7a-bbdc-5cf2-9ac0-f12de2c33e28"
version = "1.1.0"

[[deps.Mmap]]
uuid = "a63ad114-7e13-5084-954f-fe012c677804"

[[deps.MozillaCACerts_jll]]
uuid = "14a3606d-f60d-562e-9121-12d972cd8159"
version = "2022.10.11"

[[deps.NLSolversBase]]
deps = ["DiffResults", "Distributed", "FiniteDiff", "ForwardDiff"]
git-tree-sha1 = "a0b464d183da839699f4c79e7606d9d186ec172c"
uuid = "d41bc354-129a-5804-8e4c-c37616107c6c"
version = "7.8.3"

[[deps.NaNMath]]
deps = ["OpenLibm_jll"]
git-tree-sha1 = "0877504529a3e5c3343c6f8b4c0381e57e4387e4"
uuid = "77ba4419-2d1f-58cd-9bb1-8ffee604a2e3"
version = "1.0.2"

[[deps.NearestNeighbors]]
deps = ["Distances", "StaticArrays"]
git-tree-sha1 = "2c3726ceb3388917602169bed973dbc97f1b51a8"
uuid = "b8a86587-4115-5ab1-83bc-aa920d37bbce"
version = "0.4.13"

[[deps.NetworkOptions]]
uuid = "ca575930-c2e3-43a9-ace4-1e988b2c1908"
version = "1.2.0"

[[deps.OffsetArrays]]
deps = ["Adapt"]
git-tree-sha1 = "2ac17d29c523ce1cd38e27785a7d23024853a4bb"
uuid = "6fe1bfb0-de20-5000-8ca7-80f57d26f881"
version = "1.12.10"

[[deps.Ogg_jll]]
deps = ["Artifacts", "JLLWrappers", "Libdl", "Pkg"]
git-tree-sha1 = "887579a3eb005446d514ab7aeac5d1d027658b8f"
uuid = "e7412a2a-1a6e-54c0-be00-318e2571c051"
version = "1.3.5+1"

[[deps.OpenBLAS_jll]]
deps = ["Artifacts", "CompilerSupportLibraries_jll", "Libdl"]
uuid = "4536629a-c528-5b80-bd46-f80d51c5b363"
version = "0.3.21+4"

[[deps.OpenLibm_jll]]
deps = ["Artifacts", "Libdl"]
uuid = "05823500-19ac-5b8b-9628-191a04bc5112"
version = "0.8.1+0"

[[deps.OpenMPI_jll]]
deps = ["Artifacts", "CompilerSupportLibraries_jll", "JLLWrappers", "LazyArtifacts", "Libdl", "MPIPreferences", "TOML"]
git-tree-sha1 = "e25c1778a98e34219a00455d6e4384e017ea9762"
uuid = "fe0851c0-eecd-5654-98d4-656369965a5c"
version = "4.1.6+0"

[[deps.OpenSSL]]
deps = ["BitFlags", "Dates", "MozillaCACerts_jll", "OpenSSL_jll", "Sockets"]
git-tree-sha1 = "51901a49222b09e3743c65b8847687ae5fc78eb2"
uuid = "4d8831e6-92b7-49fb-bdf8-b643e874388c"
version = "1.4.1"

[[deps.OpenSSL_jll]]
deps = ["Artifacts", "JLLWrappers", "Libdl"]
git-tree-sha1 = "a12e56c72edee3ce6b96667745e6cbbe5498f200"
uuid = "458c3c95-2e84-50aa-8efc-19380b2a3a95"
version = "1.1.23+0"

[[deps.OpenSpecFun_jll]]
deps = ["Artifacts", "CompilerSupportLibraries_jll", "JLLWrappers", "Libdl", "Pkg"]
git-tree-sha1 = "13652491f6856acfd2db29360e1bbcd4565d04f1"
uuid = "efe28fd5-8261-553b-a9e1-b2916fc3738e"
version = "0.5.5+0"

[[deps.Optim]]
deps = ["Compat", "FillArrays", "ForwardDiff", "LineSearches", "LinearAlgebra", "NLSolversBase", "NaNMath", "Parameters", "PositiveFactorizations", "Printf", "SparseArrays", "StatsBase"]
git-tree-sha1 = "963b004d15216f8129f6c0f7d187efa136570be0"
uuid = "429524aa-4258-5aef-a3af-852621145aeb"
version = "1.7.7"

[[deps.Opus_jll]]
deps = ["Artifacts", "JLLWrappers", "Libdl", "Pkg"]
git-tree-sha1 = "51a08fb14ec28da2ec7a927c4337e4332c2a4720"
uuid = "91d4177d-7536-5919-b921-800302f37372"
version = "1.3.2+0"

[[deps.OrderedCollections]]
git-tree-sha1 = "2e73fe17cac3c62ad1aebe70d44c963c3cfdc3e3"
uuid = "bac558e1-5e72-5ebc-8fee-abe8a469f55d"
version = "1.6.2"

[[deps.PCRE2_jll]]
deps = ["Artifacts", "Libdl"]
uuid = "efcefdf7-47ab-520b-bdef-62a2eaa19f15"
version = "10.42.0+0"

[[deps.Parameters]]
deps = ["OrderedCollections", "UnPack"]
git-tree-sha1 = "34c0e9ad262e5f7fc75b10a9952ca7692cfc5fbe"
uuid = "d96e819e-fc66-5662-9728-84c9c7592b0a"
version = "0.12.3"

[[deps.Parsers]]
deps = ["Dates", "PrecompileTools", "UUIDs"]
git-tree-sha1 = "716e24b21538abc91f6205fd1d8363f39b442851"
uuid = "69de0a69-1ddd-5017-9359-2bf0b02dc9f0"
version = "2.7.2"

[[deps.PeriodicTable]]
deps = ["Base64", "Test", "Unitful"]
git-tree-sha1 = "9a9731f346797126271405971dfdf4709947718b"
uuid = "7b2266bf-644c-5ea3-82d8-af4bbd25a884"
version = "1.1.4"

[[deps.Pipe]]
git-tree-sha1 = "6842804e7867b115ca9de748a0cf6b364523c16d"
uuid = "b98c9c47-44ae-5843-9183-064241ee97a0"
version = "1.3.0"

[[deps.Pixman_jll]]
deps = ["Artifacts", "CompilerSupportLibraries_jll", "JLLWrappers", "LLVMOpenMP_jll", "Libdl"]
git-tree-sha1 = "64779bc4c9784fee475689a1752ef4d5747c5e87"
uuid = "30392449-352a-5448-841d-b1acce4e97dc"
version = "0.42.2+0"

[[deps.Pkg]]
deps = ["Artifacts", "Dates", "Downloads", "FileWatching", "LibGit2", "Libdl", "Logging", "Markdown", "Printf", "REPL", "Random", "SHA", "Serialization", "TOML", "Tar", "UUIDs", "p7zip_jll"]
uuid = "44cfe95a-1eb2-52ea-b672-e2afdf69b78f"
version = "1.9.2"

[[deps.PkgVersion]]
deps = ["Pkg"]
git-tree-sha1 = "f9501cc0430a26bc3d156ae1b5b0c1b47af4d6da"
uuid = "eebad327-c553-4316-9ea0-9fa01ccd7688"
version = "0.3.3"

[[deps.PlotThemes]]
deps = ["PlotUtils", "Statistics"]
git-tree-sha1 = "1f03a2d339f42dca4a4da149c7e15e9b896ad899"
uuid = "ccf2f8ad-2431-5c83-bf29-c5338b663b6a"
version = "3.1.0"

[[deps.PlotUtils]]
deps = ["ColorSchemes", "Colors", "Dates", "PrecompileTools", "Printf", "Random", "Reexport", "Statistics"]
git-tree-sha1 = "f92e1315dadf8c46561fb9396e525f7200cdc227"
uuid = "995b91a9-d308-5afd-9ec6-746e21dbc043"
version = "1.3.5"

[[deps.Plots]]
deps = ["Base64", "Contour", "Dates", "Downloads", "FFMPEG", "FixedPointNumbers", "GR", "JLFzf", "JSON", "LaTeXStrings", "Latexify", "LinearAlgebra", "Measures", "NaNMath", "Pkg", "PlotThemes", "PlotUtils", "PrecompileTools", "Preferences", "Printf", "REPL", "Random", "RecipesBase", "RecipesPipeline", "Reexport", "RelocatableFolders", "Requires", "Scratch", "Showoff", "SparseArrays", "Statistics", "StatsBase", "UUIDs", "UnicodeFun", "UnitfulLatexify", "Unzip"]
git-tree-sha1 = "ccee59c6e48e6f2edf8a5b64dc817b6729f99eb5"
uuid = "91a5bcdd-55d7-5caf-9e0b-520d859cae80"
version = "1.39.0"

    [deps.Plots.extensions]
    FileIOExt = "FileIO"
    GeometryBasicsExt = "GeometryBasics"
    IJuliaExt = "IJulia"
    ImageInTerminalExt = "ImageInTerminal"
    UnitfulExt = "Unitful"

    [deps.Plots.weakdeps]
    FileIO = "5789e2e9-d7fb-5bc7-8068-2c6fae9b9549"
    GeometryBasics = "5c1252a2-5f33-56bf-86c9-59e7332b4326"
    IJulia = "7073ff75-c697-5162-941a-fcdaad2a7d2a"
    ImageInTerminal = "d8c32880-2388-543b-8c61-d9f865259254"
    Unitful = "1986cc42-f94f-5a68-af5c-568840ba703d"

[[deps.PlutoHooks]]
deps = ["InteractiveUtils", "Markdown", "UUIDs"]
git-tree-sha1 = "072cdf20c9b0507fdd977d7d246d90030609674b"
uuid = "0ff47ea0-7a50-410d-8455-4348d5de0774"
version = "0.0.5"

[[deps.PlutoLinks]]
deps = ["FileWatching", "InteractiveUtils", "Markdown", "PlutoHooks", "Revise", "UUIDs"]
git-tree-sha1 = "8f5fa7056e6dcfb23ac5211de38e6c03f6367794"
uuid = "0ff47ea0-7a50-410d-8455-4348d5de0420"
version = "0.1.6"

[[deps.PlutoTeachingTools]]
deps = ["Downloads", "HypertextLiteral", "LaTeXStrings", "Latexify", "Markdown", "PlutoLinks", "PlutoUI", "Random"]
git-tree-sha1 = "542de5acb35585afcf202a6d3361b430bc1c3fbd"
uuid = "661c6b06-c737-4d37-b85c-46df65de6f69"
version = "0.2.13"

[[deps.PlutoUI]]
deps = ["AbstractPlutoDingetjes", "Base64", "ColorTypes", "Dates", "FixedPointNumbers", "Hyperscript", "HypertextLiteral", "IOCapture", "InteractiveUtils", "JSON", "Logging", "MIMEs", "Markdown", "Random", "Reexport", "URIs", "UUIDs"]
git-tree-sha1 = "e47cd150dbe0443c3a3651bc5b9cbd5576ab75b7"
uuid = "7f904dfe-b85e-4ff6-b463-dae2292396a8"
version = "0.7.52"

[[deps.Polynomials]]
deps = ["LinearAlgebra", "RecipesBase"]
git-tree-sha1 = "3aa2bb4982e575acd7583f01531f241af077b163"
uuid = "f27b6e38-b328-58d1-80ce-0feddd5e7a45"
version = "3.2.13"

    [deps.Polynomials.extensions]
    PolynomialsChainRulesCoreExt = "ChainRulesCore"
    PolynomialsMakieCoreExt = "MakieCore"
    PolynomialsMutableArithmeticsExt = "MutableArithmetics"

    [deps.Polynomials.weakdeps]
    ChainRulesCore = "d360d2e6-b24c-11e9-a2a3-2a2ae2dbcce4"
    MakieCore = "20f20a25-4f0e-4fdf-b5d1-57303727442b"
    MutableArithmetics = "d8a4904e-b15c-11e9-3269-09a3773c0cb0"

[[deps.PooledArrays]]
deps = ["DataAPI", "Future"]
git-tree-sha1 = "36d8b4b899628fb92c2749eb488d884a926614d3"
uuid = "2dfb63ee-cc39-5dd5-95bd-886bf059d720"
version = "1.4.3"

[[deps.PositiveFactorizations]]
deps = ["LinearAlgebra"]
git-tree-sha1 = "17275485f373e6673f7e7f97051f703ed5b15b20"
uuid = "85a6dd25-e78a-55b7-8502-1745935b8125"
version = "0.2.4"

[[deps.PrecompileTools]]
deps = ["Preferences"]
git-tree-sha1 = "03b4c25b43cb84cee5c90aa9b5ea0a78fd848d2f"
uuid = "aea7be01-6a6a-4083-8856-8a6e6704d82a"
version = "1.2.0"

[[deps.Preferences]]
deps = ["TOML"]
git-tree-sha1 = "00805cd429dcb4870060ff49ef443486c262e38e"
uuid = "21216c6a-2e73-6563-6e65-726566657250"
version = "1.4.1"

[[deps.PrettyTables]]
deps = ["Crayons", "LaTeXStrings", "Markdown", "Printf", "Reexport", "StringManipulation", "Tables"]
git-tree-sha1 = "ee094908d720185ddbdc58dbe0c1cbe35453ec7a"
uuid = "08abe8d2-0d0c-5749-adfa-8a2ac140af0d"
version = "2.2.7"

[[deps.Primes]]
deps = ["IntegerMathUtils"]
git-tree-sha1 = "4c9f306e5d6603ae203c2000dd460d81a5251489"
uuid = "27ebfcd6-29c5-5fa9-bf4b-fb8fc14df3ae"
version = "0.5.4"

[[deps.Printf]]
deps = ["Unicode"]
uuid = "de0858da-6303-5e67-8744-51eddeeeb8d7"

[[deps.Profile]]
deps = ["Printf"]
uuid = "9abbd945-dff8-562f-b5e8-e1ebf5ef1b79"

[[deps.ProgressMeter]]
deps = ["Distributed", "Printf"]
git-tree-sha1 = "00099623ffee15972c16111bcf84c58a0051257c"
uuid = "92933f4c-e287-5a05-a399-4b506db050ca"
version = "1.9.0"

[[deps.PseudoPotentialIO]]
deps = ["EzXML", "LinearAlgebra"]
git-tree-sha1 = "88cf9598d70015889c99920ff3dacca0eb26ae90"
uuid = "cb339c56-07fa-4cb2-923a-142469552264"
version = "0.1.1"

[[deps.Qhull_jll]]
deps = ["Artifacts", "JLLWrappers", "Libdl"]
git-tree-sha1 = "be2449911f4d6cfddacdf7efc895eceda3eee5c1"
uuid = "784f63db-0788-585a-bace-daefebcd302b"
version = "8.0.1003+0"

[[deps.Qt6Base_jll]]
deps = ["Artifacts", "CompilerSupportLibraries_jll", "Fontconfig_jll", "Glib_jll", "JLLWrappers", "Libdl", "Libglvnd_jll", "OpenSSL_jll", "Vulkan_Loader_jll", "Xorg_libSM_jll", "Xorg_libXext_jll", "Xorg_libXrender_jll", "Xorg_libxcb_jll", "Xorg_xcb_util_cursor_jll", "Xorg_xcb_util_image_jll", "Xorg_xcb_util_keysyms_jll", "Xorg_xcb_util_renderutil_jll", "Xorg_xcb_util_wm_jll", "Zlib_jll", "libinput_jll", "xkbcommon_jll"]
git-tree-sha1 = "7c29f0e8c575428bd84dc3c72ece5178caa67336"
uuid = "c0090381-4147-56d7-9ebc-da0b1113ec56"
version = "6.5.2+2"

[[deps.Quadmath]]
deps = ["Compat", "Printf", "Random", "Requires"]
git-tree-sha1 = "15c8465e3cb37b6bf3abcc0a4c9440799f2ba3fb"
uuid = "be4d8f0f-7fa4-5f49-b795-2f01399ab2dd"
version = "0.5.9"

[[deps.REPL]]
deps = ["InteractiveUtils", "Markdown", "Sockets", "Unicode"]
uuid = "3fa0cd96-eef1-5676-8a61-b3b8758bbffb"

[[deps.Random]]
deps = ["SHA", "Serialization"]
uuid = "9a3f8284-a2c9-5f02-9a11-845980a1fd5c"

[[deps.Ratios]]
deps = ["Requires"]
git-tree-sha1 = "1342a47bf3260ee108163042310d26f2be5ec90b"
uuid = "c84ed2f1-dad5-54f0-aa8e-dbefe2724439"
version = "0.4.5"
weakdeps = ["FixedPointNumbers"]

    [deps.Ratios.extensions]
    RatiosFixedPointNumbersExt = "FixedPointNumbers"

[[deps.RecipesBase]]
deps = ["PrecompileTools"]
git-tree-sha1 = "5c3d09cc4f31f5fc6af001c250bf1278733100ff"
uuid = "3cdcf5f2-1ef4-517c-9805-6587b60abb01"
version = "1.3.4"

[[deps.RecipesPipeline]]
deps = ["Dates", "NaNMath", "PlotUtils", "PrecompileTools", "RecipesBase"]
git-tree-sha1 = "45cf9fd0ca5839d06ef333c8201714e888486342"
uuid = "01d81517-befc-4cb6-b9ec-a95719d0359c"
version = "0.6.12"

[[deps.Reexport]]
git-tree-sha1 = "45e428421666073eab6f2da5c9d310d99bb12f9b"
uuid = "189a3867-3050-52da-a836-e630ba90ab69"
version = "1.2.2"

[[deps.RelocatableFolders]]
deps = ["SHA", "Scratch"]
git-tree-sha1 = "90bc7a7c96410424509e4263e277e43250c05691"
uuid = "05181044-ff0b-4ac5-8273-598c1e38db00"
version = "1.0.0"

[[deps.Requires]]
deps = ["UUIDs"]
git-tree-sha1 = "838a3a4188e2ded87a4f9f184b4b0d78a1e91cb7"
uuid = "ae029012-a4dd-5104-9daa-d747884805df"
version = "1.3.0"

[[deps.Revise]]
deps = ["CodeTracking", "Distributed", "FileWatching", "JuliaInterpreter", "LibGit2", "LoweredCodeUtils", "OrderedCollections", "Pkg", "REPL", "Requires", "UUIDs", "Unicode"]
git-tree-sha1 = "609c26951d80551620241c3d7090c71a73da75ab"
uuid = "295af30f-e4ad-537b-8983-00126c2a3abe"
version = "3.5.6"

[[deps.Roots]]
deps = ["ChainRulesCore", "CommonSolve", "Printf", "Setfield"]
git-tree-sha1 = "06b5ac80ff1b88bd82df92c1c1875eea3954cd6e"
uuid = "f2b01f46-fcfa-551c-844a-d8ac1e96c665"
version = "2.0.20"

    [deps.Roots.extensions]
    RootsForwardDiffExt = "ForwardDiff"
    RootsIntervalRootFindingExt = "IntervalRootFinding"
    RootsSymPyExt = "SymPy"
    RootsSymPyPythonCallExt = "SymPyPythonCall"

    [deps.Roots.weakdeps]
    ForwardDiff = "f6369f11-7733-5829-9624-2563aa707210"
    IntervalRootFinding = "d2bf35a9-74e0-55ec-b149-d360ff49b807"
    SymPy = "24249f21-da20-56a4-8eb1-6a02cf4ae2e6"
    SymPyPythonCall = "bc8888f7-b21e-4b7c-a06a-5d9c9496438c"

[[deps.RoundingEmulator]]
git-tree-sha1 = "40b9edad2e5287e05bd413a38f61a8ff55b9557b"
uuid = "5eaf0fd0-dfba-4ccb-bf02-d820a40db705"
version = "0.2.1"

[[deps.SHA]]
uuid = "ea8e919c-243c-51af-8825-aaa63cd721ce"
version = "0.7.0"

[[deps.Scratch]]
deps = ["Dates"]
git-tree-sha1 = "30449ee12237627992a99d5e30ae63e4d78cd24a"
uuid = "6c6a2e73-6563-6170-7368-637461726353"
version = "1.2.0"

[[deps.SentinelArrays]]
deps = ["Dates", "Random"]
git-tree-sha1 = "04bdff0b09c65ff3e06a05e3eb7b120223da3d39"
uuid = "91c51154-3ec4-41a3-a24f-3f23e20d615c"
version = "1.4.0"

[[deps.Serialization]]
uuid = "9e88b42a-f829-5b0c-bbe9-9e923198166b"

[[deps.SetRounding]]
git-tree-sha1 = "d7a25e439d07a17b7cdf97eecee504c50fedf5f6"
uuid = "3cc68bcd-71a2-5612-b932-767ffbe40ab0"
version = "0.2.1"

[[deps.Setfield]]
deps = ["ConstructionBase", "Future", "MacroTools", "StaticArraysCore"]
git-tree-sha1 = "e2cc6d8c88613c05e1defb55170bf5ff211fbeac"
uuid = "efcf1570-3423-57d1-acb7-fd33fddbac46"
version = "1.1.1"

[[deps.SharedArrays]]
deps = ["Distributed", "Mmap", "Random", "Serialization"]
uuid = "1a1011a3-84de-559e-8e89-a11a2f7dc383"

[[deps.Showoff]]
deps = ["Dates", "Grisu"]
git-tree-sha1 = "91eddf657aca81df9ae6ceb20b959ae5653ad1de"
uuid = "992d4aef-0814-514b-bc4d-f2e9a6c4116f"
version = "1.0.3"

[[deps.SimpleBufferStream]]
git-tree-sha1 = "874e8867b33a00e784c8a7e4b60afe9e037b74e1"
uuid = "777ac1f9-54b0-4bf8-805c-2214025038e7"
version = "1.1.0"

[[deps.Sockets]]
uuid = "6462fe0b-24de-5631-8697-dd941f90decc"

[[deps.SortingAlgorithms]]
deps = ["DataStructures"]
git-tree-sha1 = "c60ec5c62180f27efea3ba2908480f8055e17cee"
uuid = "a2af1166-a08f-5f64-846c-94a0d3cef48c"
version = "1.1.1"

[[deps.SparseArrays]]
deps = ["Libdl", "LinearAlgebra", "Random", "Serialization", "SuiteSparse_jll"]
uuid = "2f01184e-e22b-5df5-ae63-d93ebab69eaf"

[[deps.SpecialFunctions]]
deps = ["IrrationalConstants", "LogExpFunctions", "OpenLibm_jll", "OpenSpecFun_jll"]
git-tree-sha1 = "e2cfc4012a19088254b3950b85c3c1d8882d864d"
uuid = "276daf66-3868-5448-9aa4-cd146d93841b"
version = "2.3.1"
weakdeps = ["ChainRulesCore"]

    [deps.SpecialFunctions.extensions]
    SpecialFunctionsChainRulesCoreExt = "ChainRulesCore"

[[deps.Spglib]]
deps = ["StaticArrays", "StructEquality", "spglib_jll"]
git-tree-sha1 = "619f71da7bd903fe7c10408e1ff34d2da17a8ab4"
uuid = "f761d5c5-86db-4880-b97f-9680a7cccfb5"
version = "0.7.0"

[[deps.Static]]
deps = ["IfElse"]
git-tree-sha1 = "f295e0a1da4ca425659c57441bcb59abb035a4bc"
uuid = "aedffcd0-7271-4cad-89d0-dc628f76c6d3"
version = "0.8.8"

[[deps.StaticArrayInterface]]
deps = ["ArrayInterface", "Compat", "IfElse", "LinearAlgebra", "PrecompileTools", "Requires", "SparseArrays", "Static", "SuiteSparse"]
git-tree-sha1 = "03fec6800a986d191f64f5c0996b59ed526eda25"
uuid = "0d7ed370-da01-4f52-bd93-41d350b8b718"
version = "1.4.1"
weakdeps = ["OffsetArrays", "StaticArrays"]

    [deps.StaticArrayInterface.extensions]
    StaticArrayInterfaceOffsetArraysExt = "OffsetArrays"
    StaticArrayInterfaceStaticArraysExt = "StaticArrays"

[[deps.StaticArrays]]
deps = ["LinearAlgebra", "Random", "StaticArraysCore"]
git-tree-sha1 = "0adf069a2a490c47273727e029371b31d44b72b2"
uuid = "90137ffa-7385-5640-81b9-e52037218182"
version = "1.6.5"
weakdeps = ["Statistics"]

    [deps.StaticArrays.extensions]
    StaticArraysStatisticsExt = "Statistics"

[[deps.StaticArraysCore]]
git-tree-sha1 = "36b3d696ce6366023a0ea192b4cd442268995a0d"
uuid = "1e83bf80-4336-4d27-bf5d-d5a4f845583c"
version = "1.4.2"

[[deps.Statistics]]
deps = ["LinearAlgebra", "SparseArrays"]
uuid = "10745b16-79ce-11e8-11f9-7d13ad32a3b2"
version = "1.9.0"

[[deps.StatsAPI]]
deps = ["LinearAlgebra"]
git-tree-sha1 = "1ff449ad350c9c4cbc756624d6f8a8c3ef56d3ed"
uuid = "82ae8749-77ed-4fe6-ae5f-f523153014b0"
version = "1.7.0"

[[deps.StatsBase]]
deps = ["DataAPI", "DataStructures", "LinearAlgebra", "LogExpFunctions", "Missings", "Printf", "Random", "SortingAlgorithms", "SparseArrays", "Statistics", "StatsAPI"]
git-tree-sha1 = "1d77abd07f617c4868c33d4f5b9e1dbb2643c9cf"
uuid = "2913bbd2-ae8a-5f71-8c99-4fb6c76f3a91"
version = "0.34.2"

[[deps.StringManipulation]]
deps = ["PrecompileTools"]
git-tree-sha1 = "a04cabe79c5f01f4d723cc6704070ada0b9d46d5"
uuid = "892a3eda-7b42-436c-8928-eab12a02cf0e"
version = "0.3.4"

[[deps.StructEquality]]
deps = ["Compat"]
git-tree-sha1 = "192a9f1de3cfef80ab1a4ba7b150bb0e11ceedcf"
uuid = "6ec83bb0-ed9f-11e9-3b4c-2b04cb4e219c"
version = "2.1.0"

[[deps.SuiteSparse]]
deps = ["Libdl", "LinearAlgebra", "Serialization", "SparseArrays"]
uuid = "4607b0f0-06f3-5cda-b6b1-a6196a1729e9"

[[deps.SuiteSparse_jll]]
deps = ["Artifacts", "Libdl", "Pkg", "libblastrampoline_jll"]
uuid = "bea87d4a-7f5b-5778-9afe-8cc45184846c"
version = "5.10.1+6"

[[deps.TOML]]
deps = ["Dates"]
uuid = "fa267f1f-6049-4f14-aa54-33bafae1ed76"
version = "1.0.3"

[[deps.TableTraits]]
deps = ["IteratorInterfaceExtensions"]
git-tree-sha1 = "c06b2f539df1c6efa794486abfb6ed2022561a39"
uuid = "3783bdb8-4a98-5b6b-af9a-565f29a5fe9c"
version = "1.0.1"

[[deps.Tables]]
deps = ["DataAPI", "DataValueInterfaces", "IteratorInterfaceExtensions", "LinearAlgebra", "OrderedCollections", "TableTraits"]
git-tree-sha1 = "a1f34829d5ac0ef499f6d84428bd6b4c71f02ead"
uuid = "bd369af6-aec1-5ad0-b16a-f7cc5008161c"
version = "1.11.0"

[[deps.Tar]]
deps = ["ArgTools", "SHA"]
uuid = "a4e569a6-e804-4fa4-b0f3-eef7a1d5b13e"
version = "1.10.0"

[[deps.TensorCore]]
deps = ["LinearAlgebra"]
git-tree-sha1 = "1feb45f88d133a655e001435632f019a9a1bcdb6"
uuid = "62fd8b95-f654-4bbd-a8a5-9c27f68ccd50"
version = "0.1.1"

[[deps.Test]]
deps = ["InteractiveUtils", "Logging", "Random", "Serialization"]
uuid = "8dfed614-e22c-5e08-85e1-65c5234f0b40"

[[deps.TimerOutputs]]
deps = ["ExprTools", "Printf"]
git-tree-sha1 = "f548a9e9c490030e545f72074a41edfd0e5bcdd7"
uuid = "a759f4b9-e2f1-59dc-863e-4aeb61b1ea8f"
version = "0.5.23"

[[deps.TranscodingStreams]]
deps = ["Random", "Test"]
git-tree-sha1 = "9a6ae7ed916312b41236fcef7e0af564ef934769"
uuid = "3bb67fe8-82b1-5028-8e26-92a6c54297fa"
version = "0.9.13"

[[deps.Tricks]]
git-tree-sha1 = "aadb748be58b492045b4f56166b5188aa63ce549"
uuid = "410a4b4d-49e4-4fbc-ab6d-cb71b17b3775"
version = "0.1.7"

[[deps.URIs]]
git-tree-sha1 = "b7a5e99f24892b6824a954199a45e9ffcc1c70f0"
uuid = "5c2747f8-b7ea-4ff2-ba2e-563bfd36b1d4"
version = "1.5.0"

[[deps.UUIDs]]
deps = ["Random", "SHA"]
uuid = "cf7118a7-6976-5b1a-9a39-7adc72f591a4"

[[deps.UnPack]]
git-tree-sha1 = "387c1f73762231e86e0c9c5443ce3b4a0a9a0c2b"
uuid = "3a884ed6-31ef-47d7-9d2a-63182c4928ed"
version = "1.0.2"

[[deps.Unicode]]
uuid = "4ec0a83e-493e-50e2-b9ac-8f72acf5a8f5"

[[deps.UnicodeFun]]
deps = ["REPL"]
git-tree-sha1 = "53915e50200959667e78a92a418594b428dffddf"
uuid = "1cfade01-22cf-5700-b092-accc4b62d6e1"
version = "0.4.1"

[[deps.Unitful]]
deps = ["Dates", "LinearAlgebra", "Random"]
git-tree-sha1 = "a72d22c7e13fe2de562feda8645aa134712a87ee"
uuid = "1986cc42-f94f-5a68-af5c-568840ba703d"
version = "1.17.0"

    [deps.Unitful.extensions]
    ConstructionBaseUnitfulExt = "ConstructionBase"
    InverseFunctionsUnitfulExt = "InverseFunctions"

    [deps.Unitful.weakdeps]
    ConstructionBase = "187b0558-2788-49d3-abe0-74a17ed4e7c9"
    InverseFunctions = "3587e190-3f89-42d0-90ee-14403ec27112"

[[deps.UnitfulAtomic]]
deps = ["Unitful"]
git-tree-sha1 = "903be579194534af1c4b4778d1ace676ca042238"
uuid = "a7773ee8-282e-5fa2-be4e-bd808c38a91a"
version = "1.0.0"

[[deps.UnitfulLatexify]]
deps = ["LaTeXStrings", "Latexify", "Unitful"]
git-tree-sha1 = "e2d817cc500e960fdbafcf988ac8436ba3208bfd"
uuid = "45397f5d-5981-4c77-b2b3-fc36d6e9b728"
version = "1.6.3"

[[deps.Unzip]]
git-tree-sha1 = "ca0969166a028236229f63514992fc073799bb78"
uuid = "41fe7b60-77ed-43a1-b4f0-825fd5a5650d"
version = "0.2.0"

[[deps.Vulkan_Loader_jll]]
deps = ["Artifacts", "JLLWrappers", "Libdl", "Wayland_jll", "Xorg_libX11_jll", "Xorg_libXrandr_jll", "xkbcommon_jll"]
git-tree-sha1 = "2f0486047a07670caad3a81a075d2e518acc5c59"
uuid = "a44049a8-05dd-5a78-86c9-5fde0876e88c"
version = "1.3.243+0"

[[deps.Wayland_jll]]
deps = ["Artifacts", "EpollShim_jll", "Expat_jll", "JLLWrappers", "Libdl", "Libffi_jll", "Pkg", "XML2_jll"]
git-tree-sha1 = "7558e29847e99bc3f04d6569e82d0f5c54460703"
uuid = "a2964d1f-97da-50d4-b82a-358c7fce9d89"
version = "1.21.0+1"

[[deps.Wayland_protocols_jll]]
deps = ["Artifacts", "JLLWrappers", "Libdl", "Pkg"]
git-tree-sha1 = "4528479aa01ee1b3b4cd0e6faef0e04cf16466da"
uuid = "2381bf8a-dfd0-557d-9999-79630e7b1b91"
version = "1.25.0+0"

[[deps.WoodburyMatrices]]
deps = ["LinearAlgebra", "SparseArrays"]
git-tree-sha1 = "de67fa59e33ad156a590055375a30b23c40299d3"
uuid = "efce3f68-66dc-5838-9240-27a6d6f5f9b6"
version = "0.5.5"

[[deps.XML2_jll]]
deps = ["Artifacts", "JLLWrappers", "Libdl", "Libiconv_jll", "Zlib_jll"]
git-tree-sha1 = "24b81b59bd35b3c42ab84fa589086e19be919916"
uuid = "02c8fc9c-b97f-50b9-bbe4-9be30ff0a78a"
version = "2.11.5+0"

[[deps.XSLT_jll]]
deps = ["Artifacts", "JLLWrappers", "Libdl", "Libgcrypt_jll", "Libgpg_error_jll", "Libiconv_jll", "Pkg", "XML2_jll", "Zlib_jll"]
git-tree-sha1 = "91844873c4085240b95e795f692c4cec4d805f8a"
uuid = "aed1982a-8fda-507f-9586-7b0439959a61"
version = "1.1.34+0"

[[deps.XZ_jll]]
deps = ["Artifacts", "JLLWrappers", "Libdl"]
git-tree-sha1 = "cf2c7de82431ca6f39250d2fc4aacd0daa1675c0"
uuid = "ffd25f8a-64ca-5728-b0f7-c24cf3aae800"
version = "5.4.4+0"

[[deps.Xorg_libICE_jll]]
deps = ["Libdl", "Pkg"]
git-tree-sha1 = "e5becd4411063bdcac16be8b66fc2f9f6f1e8fe5"
uuid = "f67eecfb-183a-506d-b269-f58e52b52d7c"
version = "1.0.10+1"

[[deps.Xorg_libSM_jll]]
deps = ["Libdl", "Pkg", "Xorg_libICE_jll"]
git-tree-sha1 = "4a9d9e4c180e1e8119b5ffc224a7b59d3a7f7e18"
uuid = "c834827a-8449-5923-a945-d239c165b7dd"
version = "1.2.3+0"

[[deps.Xorg_libX11_jll]]
deps = ["Artifacts", "JLLWrappers", "Libdl", "Xorg_libxcb_jll", "Xorg_xtrans_jll"]
git-tree-sha1 = "afead5aba5aa507ad5a3bf01f58f82c8d1403495"
uuid = "4f6342f7-b3d2-589e-9d20-edeb45f2b2bc"
version = "1.8.6+0"

[[deps.Xorg_libXau_jll]]
deps = ["Artifacts", "JLLWrappers", "Libdl"]
git-tree-sha1 = "6035850dcc70518ca32f012e46015b9beeda49d8"
uuid = "0c0b7dd1-d40b-584c-a123-a41640f87eec"
version = "1.0.11+0"

[[deps.Xorg_libXcursor_jll]]
deps = ["Artifacts", "JLLWrappers", "Libdl", "Pkg", "Xorg_libXfixes_jll", "Xorg_libXrender_jll"]
git-tree-sha1 = "12e0eb3bc634fa2080c1c37fccf56f7c22989afd"
uuid = "935fb764-8cf2-53bf-bb30-45bb1f8bf724"
version = "1.2.0+4"

[[deps.Xorg_libXdmcp_jll]]
deps = ["Artifacts", "JLLWrappers", "Libdl"]
git-tree-sha1 = "34d526d318358a859d7de23da945578e8e8727b7"
uuid = "a3789734-cfe1-5b06-b2d0-1dd0d9d62d05"
version = "1.1.4+0"

[[deps.Xorg_libXext_jll]]
deps = ["Artifacts", "JLLWrappers", "Libdl", "Pkg", "Xorg_libX11_jll"]
git-tree-sha1 = "b7c0aa8c376b31e4852b360222848637f481f8c3"
uuid = "1082639a-0dae-5f34-9b06-72781eeb8cb3"
version = "1.3.4+4"

[[deps.Xorg_libXfixes_jll]]
deps = ["Artifacts", "JLLWrappers", "Libdl", "Pkg", "Xorg_libX11_jll"]
git-tree-sha1 = "0e0dc7431e7a0587559f9294aeec269471c991a4"
uuid = "d091e8ba-531a-589c-9de9-94069b037ed8"
version = "5.0.3+4"

[[deps.Xorg_libXi_jll]]
deps = ["Artifacts", "JLLWrappers", "Libdl", "Pkg", "Xorg_libXext_jll", "Xorg_libXfixes_jll"]
git-tree-sha1 = "89b52bc2160aadc84d707093930ef0bffa641246"
uuid = "a51aa0fd-4e3c-5386-b890-e753decda492"
version = "1.7.10+4"

[[deps.Xorg_libXinerama_jll]]
deps = ["Artifacts", "JLLWrappers", "Libdl", "Pkg", "Xorg_libXext_jll"]
git-tree-sha1 = "26be8b1c342929259317d8b9f7b53bf2bb73b123"
uuid = "d1454406-59df-5ea1-beac-c340f2130bc3"
version = "1.1.4+4"

[[deps.Xorg_libXrandr_jll]]
deps = ["Artifacts", "JLLWrappers", "Libdl", "Pkg", "Xorg_libXext_jll", "Xorg_libXrender_jll"]
git-tree-sha1 = "34cea83cb726fb58f325887bf0612c6b3fb17631"
uuid = "ec84b674-ba8e-5d96-8ba1-2a689ba10484"
version = "1.5.2+4"

[[deps.Xorg_libXrender_jll]]
deps = ["Artifacts", "JLLWrappers", "Libdl", "Pkg", "Xorg_libX11_jll"]
git-tree-sha1 = "19560f30fd49f4d4efbe7002a1037f8c43d43b96"
uuid = "ea2f1a96-1ddc-540d-b46f-429655e07cfa"
version = "0.9.10+4"

[[deps.Xorg_libpthread_stubs_jll]]
deps = ["Artifacts", "JLLWrappers", "Libdl"]
git-tree-sha1 = "8fdda4c692503d44d04a0603d9ac0982054635f9"
uuid = "14d82f49-176c-5ed1-bb49-ad3f5cbd8c74"
version = "0.1.1+0"

[[deps.Xorg_libxcb_jll]]
deps = ["Artifacts", "JLLWrappers", "Libdl", "XSLT_jll", "Xorg_libXau_jll", "Xorg_libXdmcp_jll", "Xorg_libpthread_stubs_jll"]
git-tree-sha1 = "b4bfde5d5b652e22b9c790ad00af08b6d042b97d"
uuid = "c7cfdc94-dc32-55de-ac96-5a1b8d977c5b"
version = "1.15.0+0"

[[deps.Xorg_libxkbfile_jll]]
deps = ["Artifacts", "JLLWrappers", "Libdl", "Xorg_libX11_jll"]
git-tree-sha1 = "730eeca102434283c50ccf7d1ecdadf521a765a4"
uuid = "cc61e674-0454-545c-8b26-ed2c68acab7a"
version = "1.1.2+0"

[[deps.Xorg_xcb_util_cursor_jll]]
deps = ["Artifacts", "JLLWrappers", "Libdl", "Xorg_xcb_util_image_jll", "Xorg_xcb_util_jll", "Xorg_xcb_util_renderutil_jll"]
git-tree-sha1 = "04341cb870f29dcd5e39055f895c39d016e18ccd"
uuid = "e920d4aa-a673-5f3a-b3d7-f755a4d47c43"
version = "0.1.4+0"

[[deps.Xorg_xcb_util_image_jll]]
deps = ["Artifacts", "JLLWrappers", "Libdl", "Pkg", "Xorg_xcb_util_jll"]
git-tree-sha1 = "0fab0a40349ba1cba2c1da699243396ff8e94b97"
uuid = "12413925-8142-5f55-bb0e-6d7ca50bb09b"
version = "0.4.0+1"

[[deps.Xorg_xcb_util_jll]]
deps = ["Artifacts", "JLLWrappers", "Libdl", "Pkg", "Xorg_libxcb_jll"]
git-tree-sha1 = "e7fd7b2881fa2eaa72717420894d3938177862d1"
uuid = "2def613f-5ad1-5310-b15b-b15d46f528f5"
version = "0.4.0+1"

[[deps.Xorg_xcb_util_keysyms_jll]]
deps = ["Artifacts", "JLLWrappers", "Libdl", "Pkg", "Xorg_xcb_util_jll"]
git-tree-sha1 = "d1151e2c45a544f32441a567d1690e701ec89b00"
uuid = "975044d2-76e6-5fbe-bf08-97ce7c6574c7"
version = "0.4.0+1"

[[deps.Xorg_xcb_util_renderutil_jll]]
deps = ["Artifacts", "JLLWrappers", "Libdl", "Pkg", "Xorg_xcb_util_jll"]
git-tree-sha1 = "dfd7a8f38d4613b6a575253b3174dd991ca6183e"
uuid = "0d47668e-0667-5a69-a72c-f761630bfb7e"
version = "0.3.9+1"

[[deps.Xorg_xcb_util_wm_jll]]
deps = ["Artifacts", "JLLWrappers", "Libdl", "Pkg", "Xorg_xcb_util_jll"]
git-tree-sha1 = "e78d10aab01a4a154142c5006ed44fd9e8e31b67"
uuid = "c22f9ab0-d5fe-5066-847c-f4bb1cd4e361"
version = "0.4.1+1"

[[deps.Xorg_xkbcomp_jll]]
deps = ["Artifacts", "JLLWrappers", "Libdl", "Xorg_libxkbfile_jll"]
git-tree-sha1 = "330f955bc41bb8f5270a369c473fc4a5a4e4d3cb"
uuid = "35661453-b289-5fab-8a00-3d9160c6a3a4"
version = "1.4.6+0"

[[deps.Xorg_xkeyboard_config_jll]]
deps = ["Artifacts", "JLLWrappers", "Libdl", "Xorg_xkbcomp_jll"]
git-tree-sha1 = "691634e5453ad362044e2ad653e79f3ee3bb98c3"
uuid = "33bec58e-1273-512f-9401-5d533626f822"
version = "2.39.0+0"

[[deps.Xorg_xtrans_jll]]
deps = ["Artifacts", "JLLWrappers", "Libdl"]
git-tree-sha1 = "e92a1a012a10506618f10b7047e478403a046c77"
uuid = "c5fb5394-a638-5e4d-96e5-b29de1b5cf10"
version = "1.5.0+0"

[[deps.Zlib_jll]]
deps = ["Libdl"]
uuid = "83775a58-1f1d-513f-b197-d71354ab007a"
version = "1.2.13+0"

[[deps.Zstd_jll]]
deps = ["Artifacts", "JLLWrappers", "Libdl"]
git-tree-sha1 = "49ce682769cd5de6c72dcf1b94ed7790cd08974c"
uuid = "3161d3a3-bdf6-5164-811a-617609db77b4"
version = "1.5.5+0"

[[deps.eudev_jll]]
deps = ["Artifacts", "JLLWrappers", "Libdl", "Pkg", "gperf_jll"]
git-tree-sha1 = "431b678a28ebb559d224c0b6b6d01afce87c51ba"
uuid = "35ca27e7-8b34-5b7f-bca9-bdc33f59eb06"
version = "3.2.9+0"

[[deps.fzf_jll]]
deps = ["Artifacts", "JLLWrappers", "Libdl", "Pkg"]
git-tree-sha1 = "868e669ccb12ba16eaf50cb2957ee2ff61261c56"
uuid = "214eeab7-80f7-51ab-84ad-2988db7cef09"
version = "0.29.0+0"

[[deps.gperf_jll]]
deps = ["Artifacts", "JLLWrappers", "Libdl", "Pkg"]
git-tree-sha1 = "3516a5630f741c9eecb3720b1ec9d8edc3ecc033"
uuid = "1a1c6b14-54f6-533d-8383-74cd7377aa70"
version = "3.1.1+0"

[[deps.libaom_jll]]
deps = ["Artifacts", "JLLWrappers", "Libdl", "Pkg"]
git-tree-sha1 = "3a2ea60308f0996d26f1e5354e10c24e9ef905d4"
uuid = "a4ae2306-e953-59d6-aa16-d00cac43593b"
version = "3.4.0+0"

[[deps.libass_jll]]
deps = ["Artifacts", "Bzip2_jll", "FreeType2_jll", "FriBidi_jll", "HarfBuzz_jll", "JLLWrappers", "Libdl", "Pkg", "Zlib_jll"]
git-tree-sha1 = "5982a94fcba20f02f42ace44b9894ee2b140fe47"
uuid = "0ac62f75-1d6f-5e53-bd7c-93b484bb37c0"
version = "0.15.1+0"

[[deps.libblastrampoline_jll]]
deps = ["Artifacts", "Libdl"]
uuid = "8e850b90-86db-534c-a0d3-1478176c7d93"
version = "5.8.0+0"

[[deps.libevdev_jll]]
deps = ["Artifacts", "JLLWrappers", "Libdl", "Pkg"]
git-tree-sha1 = "141fe65dc3efabb0b1d5ba74e91f6ad26f84cc22"
uuid = "2db6ffa8-e38f-5e21-84af-90c45d0032cc"
version = "1.11.0+0"

[[deps.libfdk_aac_jll]]
deps = ["Artifacts", "JLLWrappers", "Libdl", "Pkg"]
git-tree-sha1 = "daacc84a041563f965be61859a36e17c4e4fcd55"
uuid = "f638f0a6-7fb0-5443-88ba-1cc74229b280"
version = "2.0.2+0"

[[deps.libinput_jll]]
deps = ["Artifacts", "JLLWrappers", "Libdl", "Pkg", "eudev_jll", "libevdev_jll", "mtdev_jll"]
git-tree-sha1 = "ad50e5b90f222cfe78aa3d5183a20a12de1322ce"
uuid = "36db933b-70db-51c0-b978-0f229ee0e533"
version = "1.18.0+0"

[[deps.libpng_jll]]
deps = ["Artifacts", "JLLWrappers", "Libdl", "Pkg", "Zlib_jll"]
git-tree-sha1 = "94d180a6d2b5e55e447e2d27a29ed04fe79eb30c"
uuid = "b53b4c65-9356-5827-b1ea-8c7a1a84506f"
version = "1.6.38+0"

[[deps.libvorbis_jll]]
deps = ["Artifacts", "JLLWrappers", "Libdl", "Ogg_jll", "Pkg"]
git-tree-sha1 = "b910cb81ef3fe6e78bf6acee440bda86fd6ae00c"
uuid = "f27f6e37-5d2b-51aa-960f-b287f2bc3b7a"
version = "1.3.7+1"

[[deps.mtdev_jll]]
deps = ["Artifacts", "JLLWrappers", "Libdl", "Pkg"]
git-tree-sha1 = "814e154bdb7be91d78b6802843f76b6ece642f11"
uuid = "009596ad-96f7-51b1-9f1b-5ce2d5e8a71e"
version = "1.1.6+0"

[[deps.nghttp2_jll]]
deps = ["Artifacts", "Libdl"]
uuid = "8e850ede-7688-5339-a07c-302acd2aaf8d"
version = "1.48.0+0"

[[deps.p7zip_jll]]
deps = ["Artifacts", "Libdl"]
uuid = "3f19e933-33d8-53b3-aaab-bd5110c3b7a0"
version = "17.4.0+0"

[[deps.spglib_jll]]
deps = ["Artifacts", "CompilerSupportLibraries_jll", "JLLWrappers", "LLVMOpenMP_jll", "Libdl", "Pkg"]
git-tree-sha1 = "aaaa4deac77ded775242a698a46649811bd7a847"
uuid = "ac4a9f1e-bdb2-5204-990c-47c8b2f70d4e"
version = "1.16.5+0"

[[deps.x264_jll]]
deps = ["Artifacts", "JLLWrappers", "Libdl", "Pkg"]
git-tree-sha1 = "4fea590b89e6ec504593146bf8b988b2c00922b2"
uuid = "1270edf5-f2f9-52d2-97e9-ab00b5d0237a"
version = "2021.5.5+0"

[[deps.x265_jll]]
deps = ["Artifacts", "JLLWrappers", "Libdl", "Pkg"]
git-tree-sha1 = "ee567a171cce03570d77ad3a43e90218e38937a9"
uuid = "dfaa095f-4041-5dcd-9319-2fabd8486b76"
version = "3.5.0+0"

[[deps.xkbcommon_jll]]
deps = ["Artifacts", "JLLWrappers", "Libdl", "Pkg", "Wayland_jll", "Wayland_protocols_jll", "Xorg_libxcb_jll", "Xorg_xkeyboard_config_jll"]
git-tree-sha1 = "9c304562909ab2bab0262639bd4f444d7bc2be37"
uuid = "d8fb68d0-12a3-5cfd-a85a-d49703b185fd"
version = "1.4.1+1"
"""

# ╔═╡ Cell order:
# ╟─02d730f5-fcd1-4547-b066-adbc26455106
# ╟─d30b3ad3-5a28-451f-8de0-3d43cfb7a453
# ╠═0bed302a-6efa-4c23-863a-a56aa51bc73a
# ╟─a95792dd-6723-4bb3-9bab-308f80a6edc5
# ╟─4aed3b8b-f810-452b-8581-9b2a2b29ca0f
# ╠═89c6da91-48de-4ec5-a9b5-43f8bc2394a6
# ╠═b86eaee4-887b-4f52-83da-685de979c012
# ╟─e6b1c322-3a4f-4073-9f59-7545a0e63ac5
# ╠═b398b4ca-c0f9-4291-afb4-30a9644bbdb5
# ╟─3465e45d-344d-4473-83e6-da157e01a31c
# ╟─198f0276-f01b-4e8a-9225-4df74bcc2a46
# ╟─9414343d-25d2-4502-ab1f-e66e7ef98357
# ╟─51f20534-ff70-4eb8-b075-480b7ca34aab
# ╟─36992fa1-49dc-4ab8-98d3-2b1aed333852
# ╟─fd442026-e333-46af-a454-2e2b630a74f0
# ╟─2ccd435c-fbe7-4367-962d-da1ccb50a81e
# ╟─47cd503d-aa26-4b69-b134-9814cbd2c846
# ╠═b7d9dacb-1f72-4c25-8bd5-998b87a4d24c
# ╠═c2fdb263-d796-4554-8e03-f529e8a2e549
# ╟─0cd28278-6146-4115-a690-f379e5f7ac30
# ╟─70b9c6da-60c6-40cd-822f-a122cb37b311
# ╠═bdcae8ef-12f7-4539-ac16-24243cd6ef1b
# ╟─a86db249-f84f-41d3-9dde-80d3f32a474e
# ╟─1a0e7da6-ac7c-4b52-a4c9-dc4a514d3b98
# ╠═d1d72977-f3fb-405e-aa2b-aac10980ada5
# ╟─896f53c6-4ea1-4e2b-8c6b-e0fa99123cc6
# ╟─73863ff6-818f-4e3a-8bdf-b8251a5e3a2e
# ╠═16aa3488-59f9-44c7-a4b1-b6a8544b9b13
# ╠═ce4a4e31-9a65-4528-bf11-e90ba885a4c3
# ╟─b1f15f78-ba57-45b7-80c9-8214a446b199
# ╠═6e4a24c5-f699-4c8d-b6b2-89fbec78662e
# ╠═3feee600-5458-4e2c-98f0-dfe7e4332708
# ╟─ce856df3-29b8-4e95-89a5-86de6f29a14a
# ╟─972f791a-f9d2-4d70-a81c-0bc536d3bdc0
# ╠═2cd96b11-41e9-4f37-a509-1c9f80e68159
# ╟─4db84a39-89f2-449e-a340-4a8012a71017
# ╠═e28a9c9c-9efd-473a-9ef5-9ec37273ce36
# ╟─e2a514d7-e71e-472e-b127-af2783167dad
# ╟─032e67ec-8614-4403-958f-2aea77c0a80f
# ╠═4a6de877-7866-4d22-87a3-5720fab2ea38
# ╟─d9f48fc4-f2a0-4a8f-aa84-3c7eef772957
# ╠═970d53ef-012e-4218-ba52-a89f6929f909
# ╠═b9483d16-0d06-4ae4-9e51-0b86c26489f6
# ╟─a867c1e4-5ccf-45d5-a81e-8d40ae6ad397
# ╠═d8cda517-503a-404f-95a5-ae2ce20142f4
# ╟─382e10a8-cf84-4e1e-839e-b99bc1026de2
# ╠═ab95631c-2ed2-4da7-805a-65a937b9cec9
# ╟─d682a2ec-05d0-44ef-ae76-09fde8e5aa94
# ╠═49bac334-3b83-4358-af74-d5e4ed760160
# ╠═39cdf82e-c2fd-489b-8b84-cfd049ec1975
# ╟─5dd3ff9d-06cd-4cfa-abae-018abacd867a
# ╟─b5229952-300c-493d-9d4c-d40ba0c040de
# ╟─83f571d8-f375-4ca0-bb94-43681cef4fba
# ╠═35db6cc1-3fb6-4008-9712-d027c8293bde
# ╟─64674532-7153-44da-b67c-6ce1ff1ba21c
# ╟─3246102a-29c2-47a8-8cb6-2215447c655e
# ╠═468e1424-9204-4ea7-996d-c18747d6ed59
# ╟─9532eabd-8888-4054-be04-136916bfb2ec
# ╠═c4517741-dd2f-4cbc-a0b1-75f3b9cd7060
# ╠═9b66f88c-667f-45bc-9d54-8c97966edd01
# ╠═2c682b30-f257-4094-a75e-81c1737b81dd
# ╟─8bcc2985-c1cc-4790-8303-406c61f1cead
# ╟─d1b1ee12-479c-4b46-b008-30be3f3edfec
# ╟─2bbd3188-1ee5-4ea6-90a3-2fa373a6ef78
# ╟─9c55be21-4168-49bd-bfc0-bfeb241d1dde
# ╠═272b2df8-a19f-4be8-979d-68a4224816fe
# ╠═b0853a92-4975-4295-ba5e-692086b0993f
# ╟─244679dc-2ae6-4dee-b4e9-05bdec67b202
# ╠═a7955af9-0c88-4bcd-94e2-903e7dc0027c
# ╟─92f4c1fe-010b-429c-a83f-23bf21daae2b
# ╠═92cf9a34-51ac-4767-94d2-f5013b6f1a94
# ╟─8c35343c-546c-4d30-b59b-4d66ae67fe61
# ╠═ff837238-03cd-4fdb-bd57-24cf0d60643b
# ╟─b3fb67b3-ac8f-4836-b795-252d08bb39ec
# ╟─ff592eef-e31b-4865-bfb0-19a283de20c4
# ╟─f57a5576-345e-4012-aa96-fd84f9bf4e7f
# ╠═3ffe6928-30e2-4142-8a34-e7874999c147
# ╠═8df30591-c27c-449a-8d2f-361db4a8153b
# ╟─e8619c00-0ee9-4af3-bb4b-5458cdba0f31
# ╟─affd0b8f-2b57-40d9-87e1-43de738c0778
# ╟─9895d1a2-5019-405e-966b-105dce803aa1
# ╠═d7259bc9-8b9a-47a6-85af-dfa06eb94849
# ╟─17ca9f09-3a3f-40e0-9314-94ce8e5f36b8
# ╟─6d49ed54-f809-470f-83c9-65e40871db51
# ╟─dfd18ddd-a9e4-460a-97c4-07afbb83f4f2
# ╟─a6f782cb-27b3-45a3-8b0e-23681406abef
# ╠═110aaa6e-3cad-4374-a95f-2f3dbbfc37e6
# ╠═cb9d5564-6c68-4a6d-be6f-ad64a46da045
# ╟─50e2baea-317d-43d5-82a2-df63936ddefd
# ╠═97dce896-28bd-4e74-8ba9-cc9ff3b181c2
# ╟─3c1849b8-6345-4cdf-875a-a32ba455516b
# ╟─eedff6d1-e11b-43e4-a3d1-a04e44f65fc5
# ╟─baa15be1-4aaf-4789-95d6-c08c918cb245
# ╠═5fdd20df-4b7e-43f1-8d14-fdbfad544f6d
# ╟─512200e7-9230-4469-b5f4-4855c7754c95
# ╟─c71766f8-0f7f-499b-a1aa-37cfd6233735
# ╟─6450e4ce-a827-4d8b-8d26-0921eea7a5bf
# ╟─49f347c3-0e77-4a1f-9bef-08a7e15b9149
# ╟─14faf0a3-d7da-485c-b5e6-cee1f24592ac
# ╟─0098759c-76f5-4749-ad97-0db3745bfda4
# ╟─41d4f20f-d01e-4a4f-8d2f-da7a140a2bd8
# ╟─0f913723-86a8-407e-84be-5e5a607a2ead
# ╟─2e02d881-40df-4559-82a9-f6a11239f337
# ╠═0722bcc9-2dde-4289-8c7b-c6e3816281ff
# ╠═49b6eed8-da2f-48cf-952a-7bdbd46e6469
# ╟─32263be1-05bc-441e-b220-fa2f2aa8c052
# ╠═cdfab704-98c0-4f5a-b3b1-f9892b926f78
# ╟─ba83ffcc-662e-41e0-b875-ed42c89018f3
# ╟─46578541-6513-4236-bcdc-2eba4b821ca0
# ╠═232061e4-da8c-42d6-9801-23e724d7502c
# ╟─df7d3c42-4956-4b36-a9bc-e8fb0f0ce2f1
# ╠═bf63a030-eba0-420e-9209-e05016f3eca3
# ╟─e0e06f34-9d43-442a-82ca-fe0f7501511f
# ╟─b73829c8-c833-45a4-b168-d68e9b54547f
# ╠═e5e1630d-7d9e-43da-8da9-4c437e615e71
# ╟─264ce53d-40ff-4ae7-838e-49078f6d1ef1
# ╟─a18370bd-e054-4fe5-840a-1638ad4fbca2
# ╟─e826fee5-8fe2-4d77-a94f-24ff976a3e1f
# ╠═27853643-8358-4d84-a8bd-efc3f415e540
# ╠═b15e519a-cb5f-4bb7-b105-3b8ae704e489
# ╟─acbddbfc-ba95-4f2c-a611-9a785ee5978d
# ╟─39a08d03-9d18-4346-a93c-86adb85811a1
# ╟─00000000-0000-0000-0000-000000000001
# ╟─00000000-0000-0000-0000-000000000002
